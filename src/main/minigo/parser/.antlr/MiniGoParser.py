# Generated from /Users/peace/btl3-ppl/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,66,884,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,5,0,162,8,0,10,0,12,0,165,9,0,1,1,1,1,1,1,1,1,1,1,1,1,5,
        1,173,8,1,10,1,12,1,176,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        186,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,195,8,3,10,3,12,3,198,9,
        3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,206,8,4,10,4,12,4,209,9,4,1,5,1,5,
        1,5,1,5,1,5,1,5,5,5,217,8,5,10,5,12,5,220,9,5,1,6,1,6,1,6,3,6,225,
        8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,236,8,7,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,5,8,245,8,8,10,8,12,8,248,9,8,1,9,1,9,1,9,1,9,1,
        9,1,9,5,9,256,8,9,10,9,12,9,259,9,9,1,10,1,10,1,10,1,10,1,10,1,10,
        5,10,267,8,10,10,10,12,10,270,9,10,1,11,1,11,1,11,3,11,275,8,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,285,8,12,1,13,1,13,
        1,13,1,13,1,13,1,13,5,13,293,8,13,10,13,12,13,296,9,13,1,14,1,14,
        1,14,1,14,1,14,1,14,5,14,304,8,14,10,14,12,14,307,9,14,1,15,1,15,
        1,15,1,15,1,15,1,15,5,15,315,8,15,10,15,12,15,318,9,15,1,16,1,16,
        1,16,3,16,323,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
        333,8,17,1,18,1,18,1,18,3,18,338,8,18,1,18,1,18,1,19,1,19,1,20,1,
        20,1,20,1,20,4,20,348,8,20,11,20,12,20,349,1,20,1,20,1,21,1,21,1,
        21,5,21,357,8,21,10,21,12,21,360,9,21,1,22,1,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,5,22,371,8,22,10,22,12,22,374,9,22,1,22,1,22,1,
        22,1,22,3,22,380,8,22,1,23,1,23,1,23,1,23,3,23,386,8,23,1,24,1,24,
        1,24,1,24,1,24,4,24,393,8,24,11,24,12,24,394,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,3,25,419,8,25,1,26,1,26,1,26,3,26,424,8,
        26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,432,8,26,10,26,12,26,435,9,
        26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,3,27,455,8,27,1,28,1,28,1,28,3,28,460,
        8,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,471,8,29,
        10,29,12,29,474,9,29,1,30,1,30,1,31,1,31,1,32,4,32,481,8,32,11,32,
        12,32,482,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,493,8,33,
        1,34,1,34,3,34,497,8,34,1,34,1,34,1,34,3,34,502,8,34,1,34,1,34,3,
        34,506,8,34,1,34,1,34,4,34,510,8,34,11,34,12,34,511,1,34,1,34,3,
        34,516,8,34,1,35,1,35,1,35,1,35,1,35,3,35,523,8,35,1,36,1,36,1,36,
        1,37,1,37,1,37,1,37,3,37,532,8,37,1,38,1,38,1,38,3,38,537,8,38,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,547,8,39,1,40,1,40,1,
        40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,4,41,559,8,41,11,41,12,41,
        560,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,3,43,573,8,
        43,1,44,1,44,1,44,1,44,1,44,4,44,580,8,44,11,44,12,44,581,1,44,1,
        44,1,44,1,45,1,45,1,45,3,45,590,8,45,1,45,1,45,3,45,594,8,45,1,45,
        1,45,1,46,1,46,1,46,1,46,1,46,3,46,603,8,46,1,47,1,47,1,47,1,48,
        1,48,1,48,1,48,3,48,612,8,48,1,49,1,49,1,49,3,49,617,8,49,1,50,1,
        50,1,50,1,50,1,50,3,50,624,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,3,50,634,8,50,1,51,1,51,1,51,3,51,639,8,51,1,52,1,52,1,52,
        1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,54,1,54,3,54,654,8,54,
        1,55,1,55,3,55,658,8,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,666,8,
        56,1,57,1,57,1,57,1,57,1,57,3,57,673,8,57,1,57,1,57,1,57,1,57,3,
        57,679,8,57,3,57,681,8,57,1,58,1,58,1,58,5,58,686,8,58,10,58,12,
        58,689,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
        59,3,59,702,8,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,
        62,1,62,1,62,4,62,716,8,62,11,62,12,62,717,1,62,1,62,3,62,722,8,
        62,1,62,3,62,725,8,62,1,62,3,62,728,8,62,1,63,1,63,1,63,1,63,3,63,
        734,8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,4,64,743,8,64,11,64,
        12,64,744,1,64,1,64,3,64,749,8,64,1,65,1,65,1,65,4,65,754,8,65,11,
        65,12,65,755,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,4,66,767,
        8,66,11,66,12,66,768,1,66,1,66,3,66,773,8,66,1,66,3,66,776,8,66,
        1,66,3,66,779,8,66,1,67,1,67,1,67,1,67,3,67,785,8,67,1,68,1,68,1,
        68,1,68,1,68,1,68,1,68,4,68,794,8,68,11,68,12,68,795,1,68,1,68,3,
        68,800,8,68,1,69,1,69,1,69,4,69,805,8,69,11,69,12,69,806,1,69,1,
        69,1,69,1,70,1,70,1,70,1,70,4,70,816,8,70,11,70,12,70,817,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,4,70,831,8,70,11,
        70,12,70,832,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,4,70,847,8,70,11,70,12,70,848,1,70,1,70,1,70,3,70,854,8,
        70,1,71,1,71,1,72,1,72,1,72,3,72,861,8,72,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,3,73,872,8,73,1,74,1,74,1,74,1,74,1,75,1,
        75,1,76,1,76,1,76,1,76,1,76,0,12,0,2,6,8,10,16,18,20,26,28,30,52,
        77,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,0,9,
        1,0,27,28,1,0,29,30,1,0,29,31,1,0,44,45,2,0,2,2,56,56,1,0,40,45,
        1,0,34,38,2,0,18,18,59,59,2,0,50,50,56,56,951,0,154,1,0,0,0,2,166,
        1,0,0,0,4,185,1,0,0,0,6,187,1,0,0,0,8,199,1,0,0,0,10,210,1,0,0,0,
        12,224,1,0,0,0,14,235,1,0,0,0,16,237,1,0,0,0,18,249,1,0,0,0,20,260,
        1,0,0,0,22,274,1,0,0,0,24,284,1,0,0,0,26,286,1,0,0,0,28,297,1,0,
        0,0,30,308,1,0,0,0,32,322,1,0,0,0,34,332,1,0,0,0,36,334,1,0,0,0,
        38,341,1,0,0,0,40,347,1,0,0,0,42,353,1,0,0,0,44,379,1,0,0,0,46,385,
        1,0,0,0,48,387,1,0,0,0,50,418,1,0,0,0,52,423,1,0,0,0,54,454,1,0,
        0,0,56,456,1,0,0,0,58,463,1,0,0,0,60,475,1,0,0,0,62,477,1,0,0,0,
        64,480,1,0,0,0,66,492,1,0,0,0,68,494,1,0,0,0,70,522,1,0,0,0,72,524,
        1,0,0,0,74,531,1,0,0,0,76,536,1,0,0,0,78,546,1,0,0,0,80,548,1,0,
        0,0,82,553,1,0,0,0,84,565,1,0,0,0,86,572,1,0,0,0,88,574,1,0,0,0,
        90,586,1,0,0,0,92,602,1,0,0,0,94,604,1,0,0,0,96,611,1,0,0,0,98,616,
        1,0,0,0,100,633,1,0,0,0,102,638,1,0,0,0,104,640,1,0,0,0,106,646,
        1,0,0,0,108,653,1,0,0,0,110,657,1,0,0,0,112,665,1,0,0,0,114,680,
        1,0,0,0,116,682,1,0,0,0,118,701,1,0,0,0,120,703,1,0,0,0,122,706,
        1,0,0,0,124,709,1,0,0,0,126,733,1,0,0,0,128,735,1,0,0,0,130,750,
        1,0,0,0,132,760,1,0,0,0,134,784,1,0,0,0,136,786,1,0,0,0,138,801,
        1,0,0,0,140,853,1,0,0,0,142,855,1,0,0,0,144,860,1,0,0,0,146,871,
        1,0,0,0,148,873,1,0,0,0,150,877,1,0,0,0,152,879,1,0,0,0,154,155,
        6,0,-1,0,155,156,3,2,1,0,156,163,1,0,0,0,157,158,10,2,0,0,158,159,
        3,60,30,0,159,160,3,2,1,0,160,162,1,0,0,0,161,157,1,0,0,0,162,165,
        1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,1,1,0,0,0,165,163,1,
        0,0,0,166,167,6,1,-1,0,167,168,3,4,2,0,168,174,1,0,0,0,169,170,10,
        2,0,0,170,171,5,27,0,0,171,173,3,4,2,0,172,169,1,0,0,0,173,176,1,
        0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,3,1,0,0,0,176,174,1,0,
        0,0,177,186,5,53,0,0,178,186,5,56,0,0,179,186,3,52,26,0,180,186,
        3,36,18,0,181,182,5,23,0,0,182,183,3,0,0,0,183,184,5,24,0,0,184,
        186,1,0,0,0,185,177,1,0,0,0,185,178,1,0,0,0,185,179,1,0,0,0,185,
        180,1,0,0,0,185,181,1,0,0,0,186,5,1,0,0,0,187,188,6,3,-1,0,188,189,
        3,8,4,0,189,196,1,0,0,0,190,191,10,2,0,0,191,192,3,60,30,0,192,193,
        3,8,4,0,193,195,1,0,0,0,194,190,1,0,0,0,195,198,1,0,0,0,196,194,
        1,0,0,0,196,197,1,0,0,0,197,7,1,0,0,0,198,196,1,0,0,0,199,200,6,
        4,-1,0,200,201,3,10,5,0,201,207,1,0,0,0,202,203,10,2,0,0,203,204,
        7,0,0,0,204,206,3,10,5,0,205,202,1,0,0,0,206,209,1,0,0,0,207,205,
        1,0,0,0,207,208,1,0,0,0,208,9,1,0,0,0,209,207,1,0,0,0,210,211,6,
        5,-1,0,211,212,3,12,6,0,212,218,1,0,0,0,213,214,10,2,0,0,214,215,
        7,1,0,0,215,217,3,12,6,0,216,213,1,0,0,0,217,220,1,0,0,0,218,216,
        1,0,0,0,218,219,1,0,0,0,219,11,1,0,0,0,220,218,1,0,0,0,221,222,5,
        28,0,0,222,225,3,12,6,0,223,225,3,14,7,0,224,221,1,0,0,0,224,223,
        1,0,0,0,225,13,1,0,0,0,226,236,5,56,0,0,227,236,5,52,0,0,228,236,
        5,51,0,0,229,236,3,52,26,0,230,236,3,36,18,0,231,232,5,23,0,0,232,
        233,3,6,3,0,233,234,5,24,0,0,234,236,1,0,0,0,235,226,1,0,0,0,235,
        227,1,0,0,0,235,228,1,0,0,0,235,229,1,0,0,0,235,230,1,0,0,0,235,
        231,1,0,0,0,236,15,1,0,0,0,237,238,6,8,-1,0,238,239,3,18,9,0,239,
        246,1,0,0,0,240,241,10,2,0,0,241,242,3,60,30,0,242,243,3,18,9,0,
        243,245,1,0,0,0,244,240,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,
        246,247,1,0,0,0,247,17,1,0,0,0,248,246,1,0,0,0,249,250,6,9,-1,0,
        250,251,3,20,10,0,251,257,1,0,0,0,252,253,10,2,0,0,253,254,7,0,0,
        0,254,256,3,20,10,0,255,252,1,0,0,0,256,259,1,0,0,0,257,255,1,0,
        0,0,257,258,1,0,0,0,258,19,1,0,0,0,259,257,1,0,0,0,260,261,6,10,
        -1,0,261,262,3,22,11,0,262,268,1,0,0,0,263,264,10,2,0,0,264,265,
        7,2,0,0,265,267,3,22,11,0,266,263,1,0,0,0,267,270,1,0,0,0,268,266,
        1,0,0,0,268,269,1,0,0,0,269,21,1,0,0,0,270,268,1,0,0,0,271,272,5,
        28,0,0,272,275,3,22,11,0,273,275,3,24,12,0,274,271,1,0,0,0,274,273,
        1,0,0,0,275,23,1,0,0,0,276,285,5,56,0,0,277,285,5,51,0,0,278,285,
        3,52,26,0,279,285,3,36,18,0,280,281,5,23,0,0,281,282,3,16,8,0,282,
        283,5,24,0,0,283,285,1,0,0,0,284,276,1,0,0,0,284,277,1,0,0,0,284,
        278,1,0,0,0,284,279,1,0,0,0,284,280,1,0,0,0,285,25,1,0,0,0,286,287,
        6,13,-1,0,287,288,3,28,14,0,288,294,1,0,0,0,289,290,10,2,0,0,290,
        291,5,33,0,0,291,293,3,28,14,0,292,289,1,0,0,0,293,296,1,0,0,0,294,
        292,1,0,0,0,294,295,1,0,0,0,295,27,1,0,0,0,296,294,1,0,0,0,297,298,
        6,14,-1,0,298,299,3,30,15,0,299,305,1,0,0,0,300,301,10,2,0,0,301,
        302,5,32,0,0,302,304,3,30,15,0,303,300,1,0,0,0,304,307,1,0,0,0,305,
        303,1,0,0,0,305,306,1,0,0,0,306,29,1,0,0,0,307,305,1,0,0,0,308,309,
        6,15,-1,0,309,310,3,32,16,0,310,316,1,0,0,0,311,312,10,2,0,0,312,
        313,7,3,0,0,313,315,3,32,16,0,314,311,1,0,0,0,315,318,1,0,0,0,316,
        314,1,0,0,0,316,317,1,0,0,0,317,31,1,0,0,0,318,316,1,0,0,0,319,320,
        5,17,0,0,320,323,3,32,16,0,321,323,3,34,17,0,322,319,1,0,0,0,322,
        321,1,0,0,0,323,33,1,0,0,0,324,333,5,54,0,0,325,333,3,16,8,0,326,
        333,3,6,3,0,327,333,3,0,0,0,328,329,5,23,0,0,329,330,3,26,13,0,330,
        331,5,24,0,0,331,333,1,0,0,0,332,324,1,0,0,0,332,325,1,0,0,0,332,
        326,1,0,0,0,332,327,1,0,0,0,332,328,1,0,0,0,333,35,1,0,0,0,334,335,
        3,40,20,0,335,337,5,21,0,0,336,338,3,42,21,0,337,336,1,0,0,0,337,
        338,1,0,0,0,338,339,1,0,0,0,339,340,5,22,0,0,340,37,1,0,0,0,341,
        342,3,16,8,0,342,39,1,0,0,0,343,344,5,19,0,0,344,345,3,38,19,0,345,
        346,5,20,0,0,346,348,1,0,0,0,347,343,1,0,0,0,348,349,1,0,0,0,349,
        347,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,7,4,0,0,352,
        41,1,0,0,0,353,358,3,44,22,0,354,355,5,1,0,0,355,357,3,44,22,0,356,
        354,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,
        43,1,0,0,0,360,358,1,0,0,0,361,380,3,26,13,0,362,380,3,16,8,0,363,
        380,3,6,3,0,364,380,3,0,0,0,365,380,3,56,28,0,366,367,5,21,0,0,367,
        372,3,44,22,0,368,369,5,1,0,0,369,371,3,44,22,0,370,368,1,0,0,0,
        371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,375,1,0,0,0,
        374,372,1,0,0,0,375,376,5,22,0,0,376,380,1,0,0,0,377,378,5,21,0,
        0,378,380,5,22,0,0,379,361,1,0,0,0,379,362,1,0,0,0,379,363,1,0,0,
        0,379,364,1,0,0,0,379,365,1,0,0,0,379,366,1,0,0,0,379,377,1,0,0,
        0,380,45,1,0,0,0,381,386,3,26,13,0,382,386,3,16,8,0,383,386,3,6,
        3,0,384,386,3,0,0,0,385,381,1,0,0,0,385,382,1,0,0,0,385,383,1,0,
        0,0,385,384,1,0,0,0,386,47,1,0,0,0,387,392,3,50,25,0,388,389,5,19,
        0,0,389,390,3,46,23,0,390,391,5,20,0,0,391,393,1,0,0,0,392,388,1,
        0,0,0,393,394,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,49,1,0,
        0,0,396,419,5,56,0,0,397,419,3,114,57,0,398,419,5,51,0,0,399,419,
        5,52,0,0,400,419,5,53,0,0,401,419,5,54,0,0,402,403,5,23,0,0,403,
        404,3,16,8,0,404,405,5,24,0,0,405,419,1,0,0,0,406,407,5,23,0,0,407,
        408,3,6,3,0,408,409,5,24,0,0,409,419,1,0,0,0,410,411,5,23,0,0,411,
        412,3,0,0,0,412,413,5,24,0,0,413,419,1,0,0,0,414,415,5,23,0,0,415,
        416,3,26,13,0,416,417,5,24,0,0,417,419,1,0,0,0,418,396,1,0,0,0,418,
        397,1,0,0,0,418,398,1,0,0,0,418,399,1,0,0,0,418,400,1,0,0,0,418,
        401,1,0,0,0,418,402,1,0,0,0,418,406,1,0,0,0,418,410,1,0,0,0,418,
        414,1,0,0,0,419,51,1,0,0,0,420,421,6,26,-1,0,421,424,3,114,57,0,
        422,424,3,54,27,0,423,420,1,0,0,0,423,422,1,0,0,0,424,433,1,0,0,
        0,425,426,10,4,0,0,426,427,5,16,0,0,427,432,3,54,27,0,428,429,10,
        3,0,0,429,430,5,16,0,0,430,432,3,114,57,0,431,425,1,0,0,0,431,428,
        1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,53,1,
        0,0,0,435,433,1,0,0,0,436,455,5,56,0,0,437,455,3,48,24,0,438,439,
        5,23,0,0,439,440,3,16,8,0,440,441,5,24,0,0,441,455,1,0,0,0,442,443,
        5,23,0,0,443,444,3,6,3,0,444,445,5,24,0,0,445,455,1,0,0,0,446,447,
        5,23,0,0,447,448,3,0,0,0,448,449,5,24,0,0,449,455,1,0,0,0,450,451,
        5,23,0,0,451,452,3,26,13,0,452,453,5,24,0,0,453,455,1,0,0,0,454,
        436,1,0,0,0,454,437,1,0,0,0,454,438,1,0,0,0,454,442,1,0,0,0,454,
        446,1,0,0,0,454,450,1,0,0,0,455,55,1,0,0,0,456,457,5,56,0,0,457,
        459,5,21,0,0,458,460,3,58,29,0,459,458,1,0,0,0,459,460,1,0,0,0,460,
        461,1,0,0,0,461,462,5,22,0,0,462,57,1,0,0,0,463,464,5,56,0,0,464,
        465,5,25,0,0,465,472,3,118,59,0,466,467,5,1,0,0,467,468,5,56,0,0,
        468,469,5,25,0,0,469,471,3,118,59,0,470,466,1,0,0,0,471,474,1,0,
        0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,59,1,0,0,0,474,472,1,0,0,
        0,475,476,7,5,0,0,476,61,1,0,0,0,477,478,7,6,0,0,478,63,1,0,0,0,
        479,481,3,66,33,0,480,479,1,0,0,0,481,482,1,0,0,0,482,480,1,0,0,
        0,482,483,1,0,0,0,483,484,1,0,0,0,484,485,5,0,0,1,485,65,1,0,0,0,
        486,493,3,100,50,0,487,493,3,104,52,0,488,493,3,106,53,0,489,493,
        3,68,34,0,490,493,3,82,41,0,491,493,3,88,44,0,492,486,1,0,0,0,492,
        487,1,0,0,0,492,488,1,0,0,0,492,489,1,0,0,0,492,490,1,0,0,0,492,
        491,1,0,0,0,493,67,1,0,0,0,494,496,5,7,0,0,495,497,3,80,40,0,496,
        495,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,499,5,56,0,0,499,
        501,5,23,0,0,500,502,3,70,35,0,501,500,1,0,0,0,501,502,1,0,0,0,502,
        503,1,0,0,0,503,505,5,24,0,0,504,506,3,76,38,0,505,504,1,0,0,0,505,
        506,1,0,0,0,506,507,1,0,0,0,507,509,5,21,0,0,508,510,3,78,39,0,509,
        508,1,0,0,0,510,511,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,
        513,1,0,0,0,513,515,5,22,0,0,514,516,5,18,0,0,515,514,1,0,0,0,515,
        516,1,0,0,0,516,69,1,0,0,0,517,518,3,72,36,0,518,519,5,1,0,0,519,
        520,3,70,35,0,520,523,1,0,0,0,521,523,3,72,36,0,522,517,1,0,0,0,
        522,521,1,0,0,0,523,71,1,0,0,0,524,525,3,74,37,0,525,526,3,76,38,
        0,526,73,1,0,0,0,527,528,5,56,0,0,528,529,5,1,0,0,529,532,3,74,37,
        0,530,532,5,56,0,0,531,527,1,0,0,0,531,530,1,0,0,0,532,75,1,0,0,
        0,533,537,5,2,0,0,534,537,5,56,0,0,535,537,3,40,20,0,536,533,1,0,
        0,0,536,534,1,0,0,0,536,535,1,0,0,0,537,77,1,0,0,0,538,547,3,100,
        50,0,539,547,3,104,52,0,540,547,3,106,53,0,541,547,3,112,56,0,542,
        547,3,124,62,0,543,547,3,140,70,0,544,547,3,52,26,0,545,547,3,68,
        34,0,546,538,1,0,0,0,546,539,1,0,0,0,546,540,1,0,0,0,546,541,1,0,
        0,0,546,542,1,0,0,0,546,543,1,0,0,0,546,544,1,0,0,0,546,545,1,0,
        0,0,547,79,1,0,0,0,548,549,5,23,0,0,549,550,5,56,0,0,550,551,5,56,
        0,0,551,552,5,24,0,0,552,81,1,0,0,0,553,554,5,8,0,0,554,555,5,56,
        0,0,555,556,5,9,0,0,556,558,5,21,0,0,557,559,3,84,42,0,558,557,1,
        0,0,0,559,560,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,562,1,
        0,0,0,562,563,5,22,0,0,563,564,7,7,0,0,564,83,1,0,0,0,565,566,5,
        56,0,0,566,567,3,86,43,0,567,568,7,7,0,0,568,85,1,0,0,0,569,573,
        5,2,0,0,570,573,5,56,0,0,571,573,3,40,20,0,572,569,1,0,0,0,572,570,
        1,0,0,0,572,571,1,0,0,0,573,87,1,0,0,0,574,575,5,8,0,0,575,576,5,
        56,0,0,576,577,5,10,0,0,577,579,5,21,0,0,578,580,3,90,45,0,579,578,
        1,0,0,0,580,581,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,583,
        1,0,0,0,583,584,5,22,0,0,584,585,7,7,0,0,585,89,1,0,0,0,586,587,
        5,56,0,0,587,589,5,23,0,0,588,590,3,92,46,0,589,588,1,0,0,0,589,
        590,1,0,0,0,590,591,1,0,0,0,591,593,5,24,0,0,592,594,3,98,49,0,593,
        592,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,596,7,7,0,0,596,
        91,1,0,0,0,597,598,3,94,47,0,598,599,5,1,0,0,599,600,3,92,46,0,600,
        603,1,0,0,0,601,603,3,94,47,0,602,597,1,0,0,0,602,601,1,0,0,0,603,
        93,1,0,0,0,604,605,3,96,48,0,605,606,3,98,49,0,606,95,1,0,0,0,607,
        608,5,56,0,0,608,609,5,1,0,0,609,612,3,96,48,0,610,612,5,56,0,0,
        611,607,1,0,0,0,611,610,1,0,0,0,612,97,1,0,0,0,613,617,5,2,0,0,614,
        617,5,56,0,0,615,617,3,40,20,0,616,613,1,0,0,0,616,614,1,0,0,0,616,
        615,1,0,0,0,617,99,1,0,0,0,618,619,5,12,0,0,619,620,5,56,0,0,620,
        623,3,102,51,0,621,622,5,26,0,0,622,624,3,118,59,0,623,621,1,0,0,
        0,623,624,1,0,0,0,624,625,1,0,0,0,625,626,7,7,0,0,626,634,1,0,0,
        0,627,628,5,12,0,0,628,629,5,56,0,0,629,630,5,26,0,0,630,631,3,118,
        59,0,631,632,7,7,0,0,632,634,1,0,0,0,633,618,1,0,0,0,633,627,1,0,
        0,0,634,101,1,0,0,0,635,639,5,2,0,0,636,639,3,40,20,0,637,639,5,
        56,0,0,638,635,1,0,0,0,638,636,1,0,0,0,638,637,1,0,0,0,639,103,1,
        0,0,0,640,641,5,11,0,0,641,642,5,56,0,0,642,643,5,26,0,0,643,644,
        3,118,59,0,644,645,7,7,0,0,645,105,1,0,0,0,646,647,3,108,54,0,647,
        648,3,110,55,0,648,649,3,118,59,0,649,650,7,7,0,0,650,107,1,0,0,
        0,651,654,5,56,0,0,652,654,3,52,26,0,653,651,1,0,0,0,653,652,1,0,
        0,0,654,109,1,0,0,0,655,658,3,62,31,0,656,658,5,39,0,0,657,655,1,
        0,0,0,657,656,1,0,0,0,658,111,1,0,0,0,659,660,5,6,0,0,660,661,3,
        118,59,0,661,662,7,7,0,0,662,666,1,0,0,0,663,664,5,6,0,0,664,666,
        7,7,0,0,665,659,1,0,0,0,665,663,1,0,0,0,666,113,1,0,0,0,667,668,
        5,56,0,0,668,669,5,23,0,0,669,670,3,116,58,0,670,672,5,24,0,0,671,
        673,5,18,0,0,672,671,1,0,0,0,672,673,1,0,0,0,673,681,1,0,0,0,674,
        675,5,56,0,0,675,676,5,23,0,0,676,678,5,24,0,0,677,679,5,18,0,0,
        678,677,1,0,0,0,678,679,1,0,0,0,679,681,1,0,0,0,680,667,1,0,0,0,
        680,674,1,0,0,0,681,115,1,0,0,0,682,687,3,118,59,0,683,684,5,1,0,
        0,684,686,3,118,59,0,685,683,1,0,0,0,686,689,1,0,0,0,687,685,1,0,
        0,0,687,688,1,0,0,0,688,117,1,0,0,0,689,687,1,0,0,0,690,702,3,56,
        28,0,691,702,5,55,0,0,692,702,3,26,13,0,693,702,3,36,18,0,694,702,
        3,16,8,0,695,702,3,6,3,0,696,702,3,0,0,0,697,698,5,23,0,0,698,699,
        3,118,59,0,699,700,5,24,0,0,700,702,1,0,0,0,701,690,1,0,0,0,701,
        691,1,0,0,0,701,692,1,0,0,0,701,693,1,0,0,0,701,694,1,0,0,0,701,
        695,1,0,0,0,701,696,1,0,0,0,701,697,1,0,0,0,702,119,1,0,0,0,703,
        704,5,14,0,0,704,705,7,7,0,0,705,121,1,0,0,0,706,707,5,13,0,0,707,
        708,7,7,0,0,708,123,1,0,0,0,709,710,5,3,0,0,710,711,5,23,0,0,711,
        712,3,26,13,0,712,713,5,24,0,0,713,715,5,21,0,0,714,716,3,78,39,
        0,715,714,1,0,0,0,716,717,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,
        0,718,719,1,0,0,0,719,721,5,22,0,0,720,722,5,18,0,0,721,720,1,0,
        0,0,721,722,1,0,0,0,722,724,1,0,0,0,723,725,3,126,63,0,724,723,1,
        0,0,0,724,725,1,0,0,0,725,727,1,0,0,0,726,728,3,130,65,0,727,726,
        1,0,0,0,727,728,1,0,0,0,728,125,1,0,0,0,729,730,3,128,64,0,730,731,
        3,126,63,0,731,734,1,0,0,0,732,734,3,128,64,0,733,729,1,0,0,0,733,
        732,1,0,0,0,734,127,1,0,0,0,735,736,5,4,0,0,736,737,5,3,0,0,737,
        738,5,23,0,0,738,739,3,26,13,0,739,740,5,24,0,0,740,742,5,21,0,0,
        741,743,3,78,39,0,742,741,1,0,0,0,743,744,1,0,0,0,744,742,1,0,0,
        0,744,745,1,0,0,0,745,746,1,0,0,0,746,748,5,22,0,0,747,749,5,18,
        0,0,748,747,1,0,0,0,748,749,1,0,0,0,749,129,1,0,0,0,750,751,5,4,
        0,0,751,753,5,21,0,0,752,754,3,78,39,0,753,752,1,0,0,0,754,755,1,
        0,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,757,1,0,0,0,757,758,5,
        22,0,0,758,759,7,7,0,0,759,131,1,0,0,0,760,761,5,3,0,0,761,762,5,
        23,0,0,762,763,3,26,13,0,763,764,5,24,0,0,764,766,5,21,0,0,765,767,
        3,146,73,0,766,765,1,0,0,0,767,768,1,0,0,0,768,766,1,0,0,0,768,769,
        1,0,0,0,769,770,1,0,0,0,770,772,5,22,0,0,771,773,5,18,0,0,772,771,
        1,0,0,0,772,773,1,0,0,0,773,775,1,0,0,0,774,776,3,134,67,0,775,774,
        1,0,0,0,775,776,1,0,0,0,776,778,1,0,0,0,777,779,3,138,69,0,778,777,
        1,0,0,0,778,779,1,0,0,0,779,133,1,0,0,0,780,781,3,136,68,0,781,782,
        3,134,67,0,782,785,1,0,0,0,783,785,3,136,68,0,784,780,1,0,0,0,784,
        783,1,0,0,0,785,135,1,0,0,0,786,787,5,4,0,0,787,788,5,3,0,0,788,
        789,5,23,0,0,789,790,3,26,13,0,790,791,5,24,0,0,791,793,5,21,0,0,
        792,794,3,146,73,0,793,792,1,0,0,0,794,795,1,0,0,0,795,793,1,0,0,
        0,795,796,1,0,0,0,796,797,1,0,0,0,797,799,5,22,0,0,798,800,5,18,
        0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,137,1,0,0,0,801,802,5,4,
        0,0,802,804,5,21,0,0,803,805,3,146,73,0,804,803,1,0,0,0,805,806,
        1,0,0,0,806,804,1,0,0,0,806,807,1,0,0,0,807,808,1,0,0,0,808,809,
        5,22,0,0,809,810,7,7,0,0,810,139,1,0,0,0,811,812,5,5,0,0,812,813,
        3,150,75,0,813,815,5,21,0,0,814,816,3,146,73,0,815,814,1,0,0,0,816,
        817,1,0,0,0,817,815,1,0,0,0,817,818,1,0,0,0,818,819,1,0,0,0,819,
        820,5,22,0,0,820,821,7,7,0,0,821,854,1,0,0,0,822,823,5,5,0,0,823,
        824,3,148,74,0,824,825,5,18,0,0,825,826,3,150,75,0,826,827,5,18,
        0,0,827,828,3,152,76,0,828,830,5,21,0,0,829,831,3,146,73,0,830,829,
        1,0,0,0,831,832,1,0,0,0,832,830,1,0,0,0,832,833,1,0,0,0,833,834,
        1,0,0,0,834,835,5,22,0,0,835,836,7,7,0,0,836,854,1,0,0,0,837,838,
        5,5,0,0,838,839,3,142,71,0,839,840,5,1,0,0,840,841,3,142,71,0,841,
        842,5,39,0,0,842,843,5,15,0,0,843,844,3,144,72,0,844,846,5,21,0,
        0,845,847,3,146,73,0,846,845,1,0,0,0,847,848,1,0,0,0,848,846,1,0,
        0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,851,5,22,0,0,851,852,7,7,
        0,0,852,854,1,0,0,0,853,811,1,0,0,0,853,822,1,0,0,0,853,837,1,0,
        0,0,854,141,1,0,0,0,855,856,7,8,0,0,856,143,1,0,0,0,857,861,5,56,
        0,0,858,861,3,36,18,0,859,861,3,52,26,0,860,857,1,0,0,0,860,858,
        1,0,0,0,860,859,1,0,0,0,861,145,1,0,0,0,862,872,3,100,50,0,863,872,
        3,104,52,0,864,872,3,106,53,0,865,872,3,112,56,0,866,872,3,132,66,
        0,867,872,3,120,60,0,868,872,3,122,61,0,869,872,3,140,70,0,870,872,
        3,52,26,0,871,862,1,0,0,0,871,863,1,0,0,0,871,864,1,0,0,0,871,865,
        1,0,0,0,871,866,1,0,0,0,871,867,1,0,0,0,871,868,1,0,0,0,871,869,
        1,0,0,0,871,870,1,0,0,0,872,147,1,0,0,0,873,874,5,56,0,0,874,875,
        5,39,0,0,875,876,3,118,59,0,876,149,1,0,0,0,877,878,3,26,13,0,878,
        151,1,0,0,0,879,880,5,56,0,0,880,881,3,62,31,0,881,882,3,118,59,
        0,882,153,1,0,0,0,84,163,174,185,196,207,218,224,235,246,257,268,
        274,284,294,305,316,322,332,337,349,358,372,379,385,394,418,423,
        431,433,454,459,472,482,492,496,501,505,511,515,522,531,536,546,
        560,572,581,589,593,602,611,616,623,633,638,653,657,665,672,678,
        680,687,701,717,721,724,727,733,744,748,755,768,772,775,778,784,
        795,799,806,817,832,848,853,860,871
    ]

class MiniGoParser ( Parser ):

    grammarFileName = "MiniGo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "<INVALID>", "'if'", "'else'", 
                     "'for'", "'return'", "'func'", "'type'", "'struct'", 
                     "'interface'", "'const'", "'var'", "'continue'", "'break'", 
                     "'range'", "'.'", "'!'", "';'", "'['", "']'", "'{'", 
                     "'}'", "'('", "')'", "':'", "'='", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'&&'", "'||'", "'+='", "'-='", "'*='", 
                     "'/='", "'%='", "':='", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'//'", "'\\t'", "'\\r'", "'\\'", "'_'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'nil'", "<INVALID>", "<INVALID>", "<INVALID>", "'\\n'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "PRIMITIVE_TYPE", "IF", 
                      "ELSE", "FOR", "RETURN_WORD", "FUNC", "TYPE", "STRUCT", 
                      "INTERFACE", "CONST", "VAR", "CONTINUE", "BREAK", 
                      "RANGE", "DOT", "DIFFERENT", "SEMICOLON", "LEFT_SQUARE_BRACKET", 
                      "RIGHT_SQUARE_BRACKET", "LEFT_BRACE", "RIGHT_BRACE", 
                      "LEFT_PARENTHESES", "RIGHT_PARENTHESES", "COLONS", 
                      "EQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
                      "AND", "OR", "PLUS_EQUAL", "MINUS_EQUAL", "MULTIPLY_EQUAL", 
                      "DIVIDE_EQUAL", "MODULO_EQUAL", "COLONS_EQUAL", "SMALLER", 
                      "SMALLER_EQUAL", "GREATER", "GREATER_EQUAL", "DOUBLE_EQUAL", 
                      "DIFFERENT_EQUAL", "COMMENT", "TAB", "RETURN", "BACKSLASH", 
                      "UNDERSCORE", "INT_LITERALS", "FLOAT_LITERALS", "STRING_LITERALS", 
                      "BOOLEAN_LITERALS", "NIL", "ID", "SINGLE_COMMENT", 
                      "MULTI_COMMENT", "NL", "WS", "ILLEGAL_ESCAPE", "END_NEWLINE", 
                      "END_RETURN_NEWLINE", "END_EOF", "UNCLOSE_STRING", 
                      "ERROR_CHAR" ]

    RULE_expression_string = 0
    RULE_plus_string = 1
    RULE_term_plus = 2
    RULE_expression_float = 3
    RULE_add_float = 4
    RULE_mul_float = 5
    RULE_unary_float = 6
    RULE_term_float = 7
    RULE_expression_int = 8
    RULE_add_int = 9
    RULE_mul_int = 10
    RULE_unary_int = 11
    RULE_term_int = 12
    RULE_expression_boolean = 13
    RULE_and_boolean = 14
    RULE_compare_boolean = 15
    RULE_unary_boolean = 16
    RULE_term_boolean = 17
    RULE_expression_array = 18
    RULE_array_size = 19
    RULE_arrays_type = 20
    RULE_array_instance = 21
    RULE_array_value = 22
    RULE_array_idx = 23
    RULE_array_access_field = 24
    RULE_arr_name = 25
    RULE_access_field = 26
    RULE_field = 27
    RULE_struct_value = 28
    RULE_field_value = 29
    RULE_relational = 30
    RULE_other_operations = 31
    RULE_program = 32
    RULE_decl = 33
    RULE_funcdecl = 34
    RULE_funcParams = 35
    RULE_funcParam = 36
    RULE_funcListName = 37
    RULE_funcType = 38
    RULE_block = 39
    RULE_receiver = 40
    RULE_structdecl = 41
    RULE_struct_field = 42
    RULE_struct_fieldType = 43
    RULE_interfacedecl = 44
    RULE_interface_field = 45
    RULE_interfaceParams = 46
    RULE_interfaceParam = 47
    RULE_interfaceListName = 48
    RULE_interfaceType = 49
    RULE_vardecl = 50
    RULE_varType = 51
    RULE_constdecl = 52
    RULE_shortvardecl = 53
    RULE_lhs = 54
    RULE_assign_operators = 55
    RULE_returndecl = 56
    RULE_callfuncdecl = 57
    RULE_argu_list = 58
    RULE_value_assign = 59
    RULE_breakdecl = 60
    RULE_continuedecl = 61
    RULE_ifelsedecl = 62
    RULE_elifdecls = 63
    RULE_elifdecl = 64
    RULE_elsedecl = 65
    RULE_ifelsedecl_inside_loop = 66
    RULE_elifdecls_inside_loop = 67
    RULE_elifdecl_inside_loop = 68
    RULE_elsedecl_inside_loop = 69
    RULE_forloopdecl = 70
    RULE_for_access_value = 71
    RULE_for_arr = 72
    RULE_block_inside_loop = 73
    RULE_initialization = 74
    RULE_condition = 75
    RULE_update = 76

    ruleNames =  [ "expression_string", "plus_string", "term_plus", "expression_float", 
                   "add_float", "mul_float", "unary_float", "term_float", 
                   "expression_int", "add_int", "mul_int", "unary_int", 
                   "term_int", "expression_boolean", "and_boolean", "compare_boolean", 
                   "unary_boolean", "term_boolean", "expression_array", 
                   "array_size", "arrays_type", "array_instance", "array_value", 
                   "array_idx", "array_access_field", "arr_name", "access_field", 
                   "field", "struct_value", "field_value", "relational", 
                   "other_operations", "program", "decl", "funcdecl", "funcParams", 
                   "funcParam", "funcListName", "funcType", "block", "receiver", 
                   "structdecl", "struct_field", "struct_fieldType", "interfacedecl", 
                   "interface_field", "interfaceParams", "interfaceParam", 
                   "interfaceListName", "interfaceType", "vardecl", "varType", 
                   "constdecl", "shortvardecl", "lhs", "assign_operators", 
                   "returndecl", "callfuncdecl", "argu_list", "value_assign", 
                   "breakdecl", "continuedecl", "ifelsedecl", "elifdecls", 
                   "elifdecl", "elsedecl", "ifelsedecl_inside_loop", "elifdecls_inside_loop", 
                   "elifdecl_inside_loop", "elsedecl_inside_loop", "forloopdecl", 
                   "for_access_value", "for_arr", "block_inside_loop", "initialization", 
                   "condition", "update" ]

    EOF = Token.EOF
    T__0=1
    PRIMITIVE_TYPE=2
    IF=3
    ELSE=4
    FOR=5
    RETURN_WORD=6
    FUNC=7
    TYPE=8
    STRUCT=9
    INTERFACE=10
    CONST=11
    VAR=12
    CONTINUE=13
    BREAK=14
    RANGE=15
    DOT=16
    DIFFERENT=17
    SEMICOLON=18
    LEFT_SQUARE_BRACKET=19
    RIGHT_SQUARE_BRACKET=20
    LEFT_BRACE=21
    RIGHT_BRACE=22
    LEFT_PARENTHESES=23
    RIGHT_PARENTHESES=24
    COLONS=25
    EQUAL=26
    PLUS=27
    MINUS=28
    MULTIPLY=29
    DIVIDE=30
    MODULO=31
    AND=32
    OR=33
    PLUS_EQUAL=34
    MINUS_EQUAL=35
    MULTIPLY_EQUAL=36
    DIVIDE_EQUAL=37
    MODULO_EQUAL=38
    COLONS_EQUAL=39
    SMALLER=40
    SMALLER_EQUAL=41
    GREATER=42
    GREATER_EQUAL=43
    DOUBLE_EQUAL=44
    DIFFERENT_EQUAL=45
    COMMENT=46
    TAB=47
    RETURN=48
    BACKSLASH=49
    UNDERSCORE=50
    INT_LITERALS=51
    FLOAT_LITERALS=52
    STRING_LITERALS=53
    BOOLEAN_LITERALS=54
    NIL=55
    ID=56
    SINGLE_COMMENT=57
    MULTI_COMMENT=58
    NL=59
    WS=60
    ILLEGAL_ESCAPE=61
    END_NEWLINE=62
    END_RETURN_NEWLINE=63
    END_EOF=64
    UNCLOSE_STRING=65
    ERROR_CHAR=66

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Expression_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plus_string(self):
            return self.getTypedRuleContext(MiniGoParser.Plus_stringContext,0)


        def expression_string(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_stringContext,0)


        def relational(self):
            return self.getTypedRuleContext(MiniGoParser.RelationalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expression_string



    def expression_string(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression_stringContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 0
        self.enterRecursionRule(localctx, 0, self.RULE_expression_string, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 155
            self.plus_string(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 163
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression_stringContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression_string)
                    self.state = 157
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 158
                    self.relational()
                    self.state = 159
                    self.plus_string(0) 
                self.state = 165
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Plus_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_plus(self):
            return self.getTypedRuleContext(MiniGoParser.Term_plusContext,0)


        def plus_string(self):
            return self.getTypedRuleContext(MiniGoParser.Plus_stringContext,0)


        def PLUS(self):
            return self.getToken(MiniGoParser.PLUS, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_plus_string



    def plus_string(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Plus_stringContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 2
        self.enterRecursionRule(localctx, 2, self.RULE_plus_string, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 167
            self.term_plus()
            self._ctx.stop = self._input.LT(-1)
            self.state = 174
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Plus_stringContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_plus_string)
                    self.state = 169
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 170
                    self.match(MiniGoParser.PLUS)
                    self.state = 171
                    self.term_plus() 
                self.state = 176
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Term_plusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERALS(self):
            return self.getToken(MiniGoParser.STRING_LITERALS, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def access_field(self):
            return self.getTypedRuleContext(MiniGoParser.Access_fieldContext,0)


        def expression_array(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_arrayContext,0)


        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def expression_string(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_stringContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_term_plus




    def term_plus(self):

        localctx = MiniGoParser.Term_plusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_term_plus)
        try:
            self.state = 185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 177
                self.match(MiniGoParser.STRING_LITERALS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 178
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 179
                self.access_field(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 180
                self.expression_array()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 181
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 182
                self.expression_string(0)
                self.state = 183
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_floatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_float(self):
            return self.getTypedRuleContext(MiniGoParser.Add_floatContext,0)


        def expression_float(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_floatContext,0)


        def relational(self):
            return self.getTypedRuleContext(MiniGoParser.RelationalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expression_float



    def expression_float(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression_floatContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 6
        self.enterRecursionRule(localctx, 6, self.RULE_expression_float, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.add_float(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 196
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression_floatContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression_float)
                    self.state = 190
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 191
                    self.relational()
                    self.state = 192
                    self.add_float(0) 
                self.state = 198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Add_floatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mul_float(self):
            return self.getTypedRuleContext(MiniGoParser.Mul_floatContext,0)


        def add_float(self):
            return self.getTypedRuleContext(MiniGoParser.Add_floatContext,0)


        def PLUS(self):
            return self.getToken(MiniGoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_add_float



    def add_float(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Add_floatContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_add_float, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self.mul_float(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 207
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Add_floatContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_add_float)
                    self.state = 202
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 203
                    _la = self._input.LA(1)
                    if not(_la==27 or _la==28):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 204
                    self.mul_float(0) 
                self.state = 209
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Mul_floatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_float(self):
            return self.getTypedRuleContext(MiniGoParser.Unary_floatContext,0)


        def mul_float(self):
            return self.getTypedRuleContext(MiniGoParser.Mul_floatContext,0)


        def MULTIPLY(self):
            return self.getToken(MiniGoParser.MULTIPLY, 0)

        def DIVIDE(self):
            return self.getToken(MiniGoParser.DIVIDE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_mul_float



    def mul_float(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Mul_floatContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_mul_float, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.unary_float()
            self._ctx.stop = self._input.LT(-1)
            self.state = 218
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Mul_floatContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mul_float)
                    self.state = 213
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 214
                    _la = self._input.LA(1)
                    if not(_la==29 or _la==30):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 215
                    self.unary_float() 
                self.state = 220
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Unary_floatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def unary_float(self):
            return self.getTypedRuleContext(MiniGoParser.Unary_floatContext,0)


        def term_float(self):
            return self.getTypedRuleContext(MiniGoParser.Term_floatContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_unary_float




    def unary_float(self):

        localctx = MiniGoParser.Unary_floatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_unary_float)
        try:
            self.state = 224
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 221
                self.match(MiniGoParser.MINUS)
                self.state = 222
                self.unary_float()
                pass
            elif token in [19, 23, 51, 52, 53, 54, 56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 223
                self.term_float()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Term_floatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def FLOAT_LITERALS(self):
            return self.getToken(MiniGoParser.FLOAT_LITERALS, 0)

        def INT_LITERALS(self):
            return self.getToken(MiniGoParser.INT_LITERALS, 0)

        def access_field(self):
            return self.getTypedRuleContext(MiniGoParser.Access_fieldContext,0)


        def expression_array(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_arrayContext,0)


        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def expression_float(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_floatContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_term_float




    def term_float(self):

        localctx = MiniGoParser.Term_floatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_term_float)
        try:
            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 226
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 227
                self.match(MiniGoParser.FLOAT_LITERALS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 228
                self.match(MiniGoParser.INT_LITERALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 229
                self.access_field(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 230
                self.expression_array()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 231
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 232
                self.expression_float(0)
                self.state = 233
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_int(self):
            return self.getTypedRuleContext(MiniGoParser.Add_intContext,0)


        def expression_int(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_intContext,0)


        def relational(self):
            return self.getTypedRuleContext(MiniGoParser.RelationalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expression_int



    def expression_int(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression_intContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 16
        self.enterRecursionRule(localctx, 16, self.RULE_expression_int, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.add_int(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 246
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression_intContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression_int)
                    self.state = 240
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 241
                    self.relational()
                    self.state = 242
                    self.add_int(0) 
                self.state = 248
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Add_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mul_int(self):
            return self.getTypedRuleContext(MiniGoParser.Mul_intContext,0)


        def add_int(self):
            return self.getTypedRuleContext(MiniGoParser.Add_intContext,0)


        def PLUS(self):
            return self.getToken(MiniGoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_add_int



    def add_int(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Add_intContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_add_int, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.mul_int(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Add_intContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_add_int)
                    self.state = 252
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 253
                    _la = self._input.LA(1)
                    if not(_la==27 or _la==28):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 254
                    self.mul_int(0) 
                self.state = 259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Mul_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_int(self):
            return self.getTypedRuleContext(MiniGoParser.Unary_intContext,0)


        def mul_int(self):
            return self.getTypedRuleContext(MiniGoParser.Mul_intContext,0)


        def MULTIPLY(self):
            return self.getToken(MiniGoParser.MULTIPLY, 0)

        def DIVIDE(self):
            return self.getToken(MiniGoParser.DIVIDE, 0)

        def MODULO(self):
            return self.getToken(MiniGoParser.MODULO, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_mul_int



    def mul_int(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Mul_intContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_mul_int, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.unary_int()
            self._ctx.stop = self._input.LT(-1)
            self.state = 268
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Mul_intContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mul_int)
                    self.state = 263
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 264
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3758096384) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 265
                    self.unary_int() 
                self.state = 270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Unary_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def unary_int(self):
            return self.getTypedRuleContext(MiniGoParser.Unary_intContext,0)


        def term_int(self):
            return self.getTypedRuleContext(MiniGoParser.Term_intContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_unary_int




    def unary_int(self):

        localctx = MiniGoParser.Unary_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_unary_int)
        try:
            self.state = 274
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 271
                self.match(MiniGoParser.MINUS)
                self.state = 272
                self.unary_int()
                pass
            elif token in [19, 23, 51, 52, 53, 54, 56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.term_int()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Term_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INT_LITERALS(self):
            return self.getToken(MiniGoParser.INT_LITERALS, 0)

        def access_field(self):
            return self.getTypedRuleContext(MiniGoParser.Access_fieldContext,0)


        def expression_array(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_arrayContext,0)


        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def expression_int(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_intContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_term_int




    def term_int(self):

        localctx = MiniGoParser.Term_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_term_int)
        try:
            self.state = 284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.match(MiniGoParser.INT_LITERALS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 278
                self.access_field(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 279
                self.expression_array()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 280
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 281
                self.expression_int(0)
                self.state = 282
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_booleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.And_booleanContext,0)


        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression_boolean



    def expression_boolean(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression_booleanContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_expression_boolean, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.and_boolean(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 294
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression_booleanContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression_boolean)
                    self.state = 289
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 290
                    self.match(MiniGoParser.OR)
                    self.state = 291
                    self.and_boolean(0) 
                self.state = 296
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class And_booleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compare_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Compare_booleanContext,0)


        def and_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.And_booleanContext,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_and_boolean



    def and_boolean(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.And_booleanContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 28
        self.enterRecursionRule(localctx, 28, self.RULE_and_boolean, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.compare_boolean(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 305
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.And_booleanContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_and_boolean)
                    self.state = 300
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 301
                    self.match(MiniGoParser.AND)
                    self.state = 302
                    self.compare_boolean(0) 
                self.state = 307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Compare_booleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Unary_booleanContext,0)


        def compare_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Compare_booleanContext,0)


        def DOUBLE_EQUAL(self):
            return self.getToken(MiniGoParser.DOUBLE_EQUAL, 0)

        def DIFFERENT_EQUAL(self):
            return self.getToken(MiniGoParser.DIFFERENT_EQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_compare_boolean



    def compare_boolean(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Compare_booleanContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_compare_boolean, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.unary_boolean()
            self._ctx.stop = self._input.LT(-1)
            self.state = 316
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Compare_booleanContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_compare_boolean)
                    self.state = 311
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 312
                    _la = self._input.LA(1)
                    if not(_la==44 or _la==45):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 313
                    self.unary_boolean() 
                self.state = 318
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Unary_booleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIFFERENT(self):
            return self.getToken(MiniGoParser.DIFFERENT, 0)

        def unary_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Unary_booleanContext,0)


        def term_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Term_booleanContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_unary_boolean




    def unary_boolean(self):

        localctx = MiniGoParser.Unary_booleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_unary_boolean)
        try:
            self.state = 322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 319
                self.match(MiniGoParser.DIFFERENT)
                self.state = 320
                self.unary_boolean()
                pass
            elif token in [19, 23, 28, 51, 52, 53, 54, 56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.term_boolean()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Term_booleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_LITERALS(self):
            return self.getToken(MiniGoParser.BOOLEAN_LITERALS, 0)

        def expression_int(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_intContext,0)


        def expression_float(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_floatContext,0)


        def expression_string(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_stringContext,0)


        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_term_boolean




    def term_boolean(self):

        localctx = MiniGoParser.Term_booleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_term_boolean)
        try:
            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 324
                self.match(MiniGoParser.BOOLEAN_LITERALS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 325
                self.expression_int(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 326
                self.expression_float(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 327
                self.expression_string(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 328
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 329
                self.expression_boolean(0)
                self.state = 330
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrays_type(self):
            return self.getTypedRuleContext(MiniGoParser.Arrays_typeContext,0)


        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def array_instance(self):
            return self.getTypedRuleContext(MiniGoParser.Array_instanceContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expression_array




    def expression_array(self):

        localctx = MiniGoParser.Expression_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_expression_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.arrays_type()
            self.state = 335
            self.match(MiniGoParser.LEFT_BRACE)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591522783232) != 0):
                self.state = 336
                self.array_instance()


            self.state = 339
            self.match(MiniGoParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_sizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_int(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_intContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_size




    def array_size(self):

        localctx = MiniGoParser.Array_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_array_size)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.expression_int(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arrays_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMITIVE_TYPE(self):
            return self.getToken(MiniGoParser.PRIMITIVE_TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LEFT_SQUARE_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LEFT_SQUARE_BRACKET)
            else:
                return self.getToken(MiniGoParser.LEFT_SQUARE_BRACKET, i)

        def array_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Array_sizeContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Array_sizeContext,i)


        def RIGHT_SQUARE_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RIGHT_SQUARE_BRACKET)
            else:
                return self.getToken(MiniGoParser.RIGHT_SQUARE_BRACKET, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_arrays_type




    def arrays_type(self):

        localctx = MiniGoParser.Arrays_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_arrays_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 343
                self.match(MiniGoParser.LEFT_SQUARE_BRACKET)
                self.state = 344
                self.array_size()
                self.state = 345
                self.match(MiniGoParser.RIGHT_SQUARE_BRACKET)
                self.state = 349 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==19):
                    break

            self.state = 351
            _la = self._input.LA(1)
            if not(_la==2 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_instanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Array_valueContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Array_valueContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_instance




    def array_instance(self):

        localctx = MiniGoParser.Array_instanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_array_instance)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.array_value()
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 354
                self.match(MiniGoParser.T__0)
                self.state = 355
                self.array_value()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def expression_int(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_intContext,0)


        def expression_float(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_floatContext,0)


        def expression_string(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_stringContext,0)


        def struct_value(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_valueContext,0)


        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def array_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Array_valueContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Array_valueContext,i)


        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_array_value




    def array_value(self):

        localctx = MiniGoParser.Array_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_array_value)
        self._la = 0 # Token type
        try:
            self.state = 379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 361
                self.expression_boolean(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 362
                self.expression_int(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 363
                self.expression_float(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 364
                self.expression_string(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 365
                self.struct_value()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 366
                self.match(MiniGoParser.LEFT_BRACE)
                self.state = 367
                self.array_value()
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 368
                    self.match(MiniGoParser.T__0)
                    self.state = 369
                    self.array_value()
                    self.state = 374
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 375
                self.match(MiniGoParser.RIGHT_BRACE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 377
                self.match(MiniGoParser.LEFT_BRACE)
                self.state = 378
                self.match(MiniGoParser.RIGHT_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_idxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def expression_int(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_intContext,0)


        def expression_float(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_floatContext,0)


        def expression_string(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_stringContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_idx




    def array_idx(self):

        localctx = MiniGoParser.Array_idxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_array_idx)
        try:
            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 381
                self.expression_boolean(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 382
                self.expression_int(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 383
                self.expression_float(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 384
                self.expression_string(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_access_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arr_name(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_nameContext,0)


        def LEFT_SQUARE_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LEFT_SQUARE_BRACKET)
            else:
                return self.getToken(MiniGoParser.LEFT_SQUARE_BRACKET, i)

        def array_idx(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Array_idxContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Array_idxContext,i)


        def RIGHT_SQUARE_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RIGHT_SQUARE_BRACKET)
            else:
                return self.getToken(MiniGoParser.RIGHT_SQUARE_BRACKET, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_array_access_field




    def array_access_field(self):

        localctx = MiniGoParser.Array_access_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_array_access_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.arr_name()
            self.state = 392 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 388
                    self.match(MiniGoParser.LEFT_SQUARE_BRACKET)
                    self.state = 389
                    self.array_idx()
                    self.state = 390
                    self.match(MiniGoParser.RIGHT_SQUARE_BRACKET)

                else:
                    raise NoViableAltException(self)
                self.state = 394 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def callfuncdecl(self):
            return self.getTypedRuleContext(MiniGoParser.CallfuncdeclContext,0)


        def INT_LITERALS(self):
            return self.getToken(MiniGoParser.INT_LITERALS, 0)

        def FLOAT_LITERALS(self):
            return self.getToken(MiniGoParser.FLOAT_LITERALS, 0)

        def STRING_LITERALS(self):
            return self.getToken(MiniGoParser.STRING_LITERALS, 0)

        def BOOLEAN_LITERALS(self):
            return self.getToken(MiniGoParser.BOOLEAN_LITERALS, 0)

        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def expression_int(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_intContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def expression_float(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_floatContext,0)


        def expression_string(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_stringContext,0)


        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_name




    def arr_name(self):

        localctx = MiniGoParser.Arr_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_arr_name)
        try:
            self.state = 418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 396
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 397
                self.callfuncdecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 398
                self.match(MiniGoParser.INT_LITERALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 399
                self.match(MiniGoParser.FLOAT_LITERALS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 400
                self.match(MiniGoParser.STRING_LITERALS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 401
                self.match(MiniGoParser.BOOLEAN_LITERALS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 402
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 403
                self.expression_int(0)
                self.state = 404
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 406
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 407
                self.expression_float(0)
                self.state = 408
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 410
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 411
                self.expression_string(0)
                self.state = 412
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 414
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 415
                self.expression_boolean(0)
                self.state = 416
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callfuncdecl(self):
            return self.getTypedRuleContext(MiniGoParser.CallfuncdeclContext,0)


        def field(self):
            return self.getTypedRuleContext(MiniGoParser.FieldContext,0)


        def access_field(self):
            return self.getTypedRuleContext(MiniGoParser.Access_fieldContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_access_field



    def access_field(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Access_fieldContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_access_field, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 421
                self.callfuncdecl()
                pass

            elif la_ == 2:
                self.state = 422
                self.field()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 433
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 431
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        localctx = MiniGoParser.Access_fieldContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_access_field)
                        self.state = 425
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 426
                        self.match(MiniGoParser.DOT)
                        self.state = 427
                        self.field()
                        pass

                    elif la_ == 2:
                        localctx = MiniGoParser.Access_fieldContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_access_field)
                        self.state = 428
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 429
                        self.match(MiniGoParser.DOT)
                        self.state = 430
                        self.callfuncdecl()
                        pass

             
                self.state = 435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def array_access_field(self):
            return self.getTypedRuleContext(MiniGoParser.Array_access_fieldContext,0)


        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def expression_int(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_intContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def expression_float(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_floatContext,0)


        def expression_string(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_stringContext,0)


        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field




    def field(self):

        localctx = MiniGoParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_field)
        try:
            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.array_access_field()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 438
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 439
                self.expression_int(0)
                self.state = 440
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 442
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 443
                self.expression_float(0)
                self.state = 444
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 446
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 447
                self.expression_string(0)
                self.state = 448
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 450
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 451
                self.expression_boolean(0)
                self.state = 452
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def field_value(self):
            return self.getTypedRuleContext(MiniGoParser.Field_valueContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_value




    def struct_value(self):

        localctx = MiniGoParser.Struct_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_struct_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(MiniGoParser.ID)
            self.state = 457
            self.match(MiniGoParser.LEFT_BRACE)
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 458
                self.field_value()


            self.state = 461
            self.match(MiniGoParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def COLONS(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.COLONS)
            else:
                return self.getToken(MiniGoParser.COLONS, i)

        def value_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Value_assignContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Value_assignContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_value




    def field_value(self):

        localctx = MiniGoParser.Field_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_field_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.match(MiniGoParser.ID)
            self.state = 464
            self.match(MiniGoParser.COLONS)
            self.state = 465
            self.value_assign()
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 466
                self.match(MiniGoParser.T__0)
                self.state = 467
                self.match(MiniGoParser.ID)
                self.state = 468
                self.match(MiniGoParser.COLONS)
                self.state = 469
                self.value_assign()
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SMALLER(self):
            return self.getToken(MiniGoParser.SMALLER, 0)

        def SMALLER_EQUAL(self):
            return self.getToken(MiniGoParser.SMALLER_EQUAL, 0)

        def GREATER(self):
            return self.getToken(MiniGoParser.GREATER, 0)

        def GREATER_EQUAL(self):
            return self.getToken(MiniGoParser.GREATER_EQUAL, 0)

        def DOUBLE_EQUAL(self):
            return self.getToken(MiniGoParser.DOUBLE_EQUAL, 0)

        def DIFFERENT_EQUAL(self):
            return self.getToken(MiniGoParser.DIFFERENT_EQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_relational




    def relational(self):

        localctx = MiniGoParser.RelationalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_relational)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 69269232549888) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_operationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS_EQUAL(self):
            return self.getToken(MiniGoParser.PLUS_EQUAL, 0)

        def MINUS_EQUAL(self):
            return self.getToken(MiniGoParser.MINUS_EQUAL, 0)

        def MULTIPLY_EQUAL(self):
            return self.getToken(MiniGoParser.MULTIPLY_EQUAL, 0)

        def DIVIDE_EQUAL(self):
            return self.getToken(MiniGoParser.DIVIDE_EQUAL, 0)

        def MODULO_EQUAL(self):
            return self.getToken(MiniGoParser.MODULO_EQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_other_operations




    def other_operations(self):

        localctx = MiniGoParser.Other_operationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_other_operations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 532575944704) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MiniGoParser.EOF, 0)

        def decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.DeclContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.DeclContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_program




    def program(self):

        localctx = MiniGoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 479
                self.decl()
                self.state = 482 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591251601792) != 0)):
                    break

            self.state = 484
            self.match(MiniGoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardecl(self):
            return self.getTypedRuleContext(MiniGoParser.VardeclContext,0)


        def constdecl(self):
            return self.getTypedRuleContext(MiniGoParser.ConstdeclContext,0)


        def shortvardecl(self):
            return self.getTypedRuleContext(MiniGoParser.ShortvardeclContext,0)


        def funcdecl(self):
            return self.getTypedRuleContext(MiniGoParser.FuncdeclContext,0)


        def structdecl(self):
            return self.getTypedRuleContext(MiniGoParser.StructdeclContext,0)


        def interfacedecl(self):
            return self.getTypedRuleContext(MiniGoParser.InterfacedeclContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_decl




    def decl(self):

        localctx = MiniGoParser.DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_decl)
        try:
            self.state = 492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.vardecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.constdecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 488
                self.shortvardecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 489
                self.funcdecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 490
                self.structdecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 491
                self.interfacedecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def receiver(self):
            return self.getTypedRuleContext(MiniGoParser.ReceiverContext,0)


        def funcParams(self):
            return self.getTypedRuleContext(MiniGoParser.FuncParamsContext,0)


        def funcType(self):
            return self.getTypedRuleContext(MiniGoParser.FuncTypeContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.BlockContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.BlockContext,i)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_funcdecl




    def funcdecl(self):

        localctx = MiniGoParser.FuncdeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_funcdecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(MiniGoParser.FUNC)
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 495
                self.receiver()


            self.state = 498
            self.match(MiniGoParser.ID)
            self.state = 499
            self.match(MiniGoParser.LEFT_PARENTHESES)
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 500
                self.funcParams()


            self.state = 503
            self.match(MiniGoParser.RIGHT_PARENTHESES)
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72057594038452228) != 0):
                self.state = 504
                self.funcType()


            self.state = 507
            self.match(MiniGoParser.LEFT_BRACE)
            self.state = 509 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 508
                self.block()
                self.state = 511 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591251601640) != 0)):
                    break

            self.state = 513
            self.match(MiniGoParser.RIGHT_BRACE)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 514
                self.match(MiniGoParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcParam(self):
            return self.getTypedRuleContext(MiniGoParser.FuncParamContext,0)


        def funcParams(self):
            return self.getTypedRuleContext(MiniGoParser.FuncParamsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_funcParams




    def funcParams(self):

        localctx = MiniGoParser.FuncParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_funcParams)
        try:
            self.state = 522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.funcParam()
                self.state = 518
                self.match(MiniGoParser.T__0)
                self.state = 519
                self.funcParams()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.funcParam()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcListName(self):
            return self.getTypedRuleContext(MiniGoParser.FuncListNameContext,0)


        def funcType(self):
            return self.getTypedRuleContext(MiniGoParser.FuncTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_funcParam




    def funcParam(self):

        localctx = MiniGoParser.FuncParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_funcParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.funcListName()
            self.state = 525
            self.funcType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncListNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def funcListName(self):
            return self.getTypedRuleContext(MiniGoParser.FuncListNameContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_funcListName




    def funcListName(self):

        localctx = MiniGoParser.FuncListNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_funcListName)
        try:
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 527
                self.match(MiniGoParser.ID)
                self.state = 528
                self.match(MiniGoParser.T__0)
                self.state = 529
                self.funcListName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 530
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMITIVE_TYPE(self):
            return self.getToken(MiniGoParser.PRIMITIVE_TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def arrays_type(self):
            return self.getTypedRuleContext(MiniGoParser.Arrays_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_funcType




    def funcType(self):

        localctx = MiniGoParser.FuncTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_funcType)
        try:
            self.state = 536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 533
                self.match(MiniGoParser.PRIMITIVE_TYPE)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 534
                self.match(MiniGoParser.ID)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 535
                self.arrays_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardecl(self):
            return self.getTypedRuleContext(MiniGoParser.VardeclContext,0)


        def constdecl(self):
            return self.getTypedRuleContext(MiniGoParser.ConstdeclContext,0)


        def shortvardecl(self):
            return self.getTypedRuleContext(MiniGoParser.ShortvardeclContext,0)


        def returndecl(self):
            return self.getTypedRuleContext(MiniGoParser.ReturndeclContext,0)


        def ifelsedecl(self):
            return self.getTypedRuleContext(MiniGoParser.IfelsedeclContext,0)


        def forloopdecl(self):
            return self.getTypedRuleContext(MiniGoParser.ForloopdeclContext,0)


        def access_field(self):
            return self.getTypedRuleContext(MiniGoParser.Access_fieldContext,0)


        def funcdecl(self):
            return self.getTypedRuleContext(MiniGoParser.FuncdeclContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_block




    def block(self):

        localctx = MiniGoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_block)
        try:
            self.state = 546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 538
                self.vardecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 539
                self.constdecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 540
                self.shortvardecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 541
                self.returndecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 542
                self.ifelsedecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 543
                self.forloopdecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 544
                self.access_field(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 545
                self.funcdecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_receiver




    def receiver(self):

        localctx = MiniGoParser.ReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_receiver)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(MiniGoParser.LEFT_PARENTHESES)
            self.state = 549
            self.match(MiniGoParser.ID)
            self.state = 550
            self.match(MiniGoParser.ID)
            self.state = 551
            self.match(MiniGoParser.RIGHT_PARENTHESES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructdeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def struct_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Struct_fieldContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Struct_fieldContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_structdecl




    def structdecl(self):

        localctx = MiniGoParser.StructdeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_structdecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(MiniGoParser.TYPE)
            self.state = 554
            self.match(MiniGoParser.ID)
            self.state = 555
            self.match(MiniGoParser.STRUCT)
            self.state = 556
            self.match(MiniGoParser.LEFT_BRACE)
            self.state = 558 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 557
                self.struct_field()
                self.state = 560 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==56):
                    break

            self.state = 562
            self.match(MiniGoParser.RIGHT_BRACE)
            self.state = 563
            _la = self._input.LA(1)
            if not(_la==18 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def struct_fieldType(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_fieldTypeContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field




    def struct_field(self):

        localctx = MiniGoParser.Struct_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_struct_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(MiniGoParser.ID)
            self.state = 566
            self.struct_fieldType()
            self.state = 567
            _la = self._input.LA(1)
            if not(_la==18 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_fieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMITIVE_TYPE(self):
            return self.getToken(MiniGoParser.PRIMITIVE_TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def arrays_type(self):
            return self.getTypedRuleContext(MiniGoParser.Arrays_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_fieldType




    def struct_fieldType(self):

        localctx = MiniGoParser.Struct_fieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_struct_fieldType)
        try:
            self.state = 572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self.match(MiniGoParser.PRIMITIVE_TYPE)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 570
                self.match(MiniGoParser.ID)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 571
                self.arrays_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfacedeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def interface_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Interface_fieldContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Interface_fieldContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interfacedecl




    def interfacedecl(self):

        localctx = MiniGoParser.InterfacedeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_interfacedecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(MiniGoParser.TYPE)
            self.state = 575
            self.match(MiniGoParser.ID)
            self.state = 576
            self.match(MiniGoParser.INTERFACE)
            self.state = 577
            self.match(MiniGoParser.LEFT_BRACE)
            self.state = 579 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 578
                self.interface_field()
                self.state = 581 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==56):
                    break

            self.state = 583
            self.match(MiniGoParser.RIGHT_BRACE)
            self.state = 584
            _la = self._input.LA(1)
            if not(_la==18 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def interfaceParams(self):
            return self.getTypedRuleContext(MiniGoParser.InterfaceParamsContext,0)


        def interfaceType(self):
            return self.getTypedRuleContext(MiniGoParser.InterfaceTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_field




    def interface_field(self):

        localctx = MiniGoParser.Interface_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_interface_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(MiniGoParser.ID)
            self.state = 587
            self.match(MiniGoParser.LEFT_PARENTHESES)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 588
                self.interfaceParams()


            self.state = 591
            self.match(MiniGoParser.RIGHT_PARENTHESES)
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 72057594038452228) != 0):
                self.state = 592
                self.interfaceType()


            self.state = 595
            _la = self._input.LA(1)
            if not(_la==18 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceParam(self):
            return self.getTypedRuleContext(MiniGoParser.InterfaceParamContext,0)


        def interfaceParams(self):
            return self.getTypedRuleContext(MiniGoParser.InterfaceParamsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interfaceParams




    def interfaceParams(self):

        localctx = MiniGoParser.InterfaceParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_interfaceParams)
        try:
            self.state = 602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 597
                self.interfaceParam()
                self.state = 598
                self.match(MiniGoParser.T__0)
                self.state = 599
                self.interfaceParams()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.interfaceParam()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceListName(self):
            return self.getTypedRuleContext(MiniGoParser.InterfaceListNameContext,0)


        def interfaceType(self):
            return self.getTypedRuleContext(MiniGoParser.InterfaceTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interfaceParam




    def interfaceParam(self):

        localctx = MiniGoParser.InterfaceParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_interfaceParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.interfaceListName()
            self.state = 605
            self.interfaceType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceListNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def interfaceListName(self):
            return self.getTypedRuleContext(MiniGoParser.InterfaceListNameContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interfaceListName




    def interfaceListName(self):

        localctx = MiniGoParser.InterfaceListNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_interfaceListName)
        try:
            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.match(MiniGoParser.ID)
                self.state = 608
                self.match(MiniGoParser.T__0)
                self.state = 609
                self.interfaceListName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMITIVE_TYPE(self):
            return self.getToken(MiniGoParser.PRIMITIVE_TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def arrays_type(self):
            return self.getTypedRuleContext(MiniGoParser.Arrays_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interfaceType




    def interfaceType(self):

        localctx = MiniGoParser.InterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_interfaceType)
        try:
            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 613
                self.match(MiniGoParser.PRIMITIVE_TYPE)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 614
                self.match(MiniGoParser.ID)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 615
                self.arrays_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VardeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def varType(self):
            return self.getTypedRuleContext(MiniGoParser.VarTypeContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def EQUAL(self):
            return self.getToken(MiniGoParser.EQUAL, 0)

        def value_assign(self):
            return self.getTypedRuleContext(MiniGoParser.Value_assignContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_vardecl




    def vardecl(self):

        localctx = MiniGoParser.VardeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_vardecl)
        self._la = 0 # Token type
        try:
            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 618
                self.match(MiniGoParser.VAR)
                self.state = 619
                self.match(MiniGoParser.ID)
                self.state = 620
                self.varType()
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==26:
                    self.state = 621
                    self.match(MiniGoParser.EQUAL)
                    self.state = 622
                    self.value_assign()


                self.state = 625
                _la = self._input.LA(1)
                if not(_la==18 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.match(MiniGoParser.VAR)
                self.state = 628
                self.match(MiniGoParser.ID)
                self.state = 629
                self.match(MiniGoParser.EQUAL)
                self.state = 630
                self.value_assign()
                self.state = 631
                _la = self._input.LA(1)
                if not(_la==18 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMITIVE_TYPE(self):
            return self.getToken(MiniGoParser.PRIMITIVE_TYPE, 0)

        def arrays_type(self):
            return self.getTypedRuleContext(MiniGoParser.Arrays_typeContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_varType




    def varType(self):

        localctx = MiniGoParser.VarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_varType)
        try:
            self.state = 638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 635
                self.match(MiniGoParser.PRIMITIVE_TYPE)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 636
                self.arrays_type()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 637
                self.match(MiniGoParser.ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstdeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def EQUAL(self):
            return self.getToken(MiniGoParser.EQUAL, 0)

        def value_assign(self):
            return self.getTypedRuleContext(MiniGoParser.Value_assignContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_constdecl




    def constdecl(self):

        localctx = MiniGoParser.ConstdeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_constdecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.match(MiniGoParser.CONST)
            self.state = 641
            self.match(MiniGoParser.ID)
            self.state = 642
            self.match(MiniGoParser.EQUAL)
            self.state = 643
            self.value_assign()
            self.state = 644
            _la = self._input.LA(1)
            if not(_la==18 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortvardeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def assign_operators(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_operatorsContext,0)


        def value_assign(self):
            return self.getTypedRuleContext(MiniGoParser.Value_assignContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_shortvardecl




    def shortvardecl(self):

        localctx = MiniGoParser.ShortvardeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_shortvardecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.lhs()
            self.state = 647
            self.assign_operators()
            self.state = 648
            self.value_assign()
            self.state = 649
            _la = self._input.LA(1)
            if not(_la==18 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def access_field(self):
            return self.getTypedRuleContext(MiniGoParser.Access_fieldContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_lhs




    def lhs(self):

        localctx = MiniGoParser.LhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_lhs)
        try:
            self.state = 653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 651
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 652
                self.access_field(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_operatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def other_operations(self):
            return self.getTypedRuleContext(MiniGoParser.Other_operationsContext,0)


        def COLONS_EQUAL(self):
            return self.getToken(MiniGoParser.COLONS_EQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assign_operators




    def assign_operators(self):

        localctx = MiniGoParser.Assign_operatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_assign_operators)
        try:
            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 35, 36, 37, 38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                self.other_operations()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.match(MiniGoParser.COLONS_EQUAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturndeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN_WORD(self):
            return self.getToken(MiniGoParser.RETURN_WORD, 0)

        def value_assign(self):
            return self.getTypedRuleContext(MiniGoParser.Value_assignContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_returndecl




    def returndecl(self):

        localctx = MiniGoParser.ReturndeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_returndecl)
        self._la = 0 # Token type
        try:
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.match(MiniGoParser.RETURN_WORD)
                self.state = 660
                self.value_assign()
                self.state = 661
                _la = self._input.LA(1)
                if not(_la==18 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.match(MiniGoParser.RETURN_WORD)
                self.state = 664
                _la = self._input.LA(1)
                if not(_la==18 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallfuncdeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def argu_list(self):
            return self.getTypedRuleContext(MiniGoParser.Argu_listContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_callfuncdecl




    def callfuncdecl(self):

        localctx = MiniGoParser.CallfuncdeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_callfuncdecl)
        try:
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 667
                self.match(MiniGoParser.ID)
                self.state = 668
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 669
                self.argu_list()
                self.state = 670
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                self.state = 672
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 671
                    self.match(MiniGoParser.SEMICOLON)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.match(MiniGoParser.ID)
                self.state = 675
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 676
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                self.state = 678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 677
                    self.match(MiniGoParser.SEMICOLON)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argu_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Value_assignContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Value_assignContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_argu_list




    def argu_list(self):

        localctx = MiniGoParser.Argu_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_argu_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.value_assign()
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 683
                self.match(MiniGoParser.T__0)
                self.state = 684
                self.value_assign()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_value(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_valueContext,0)


        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def expression_array(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_arrayContext,0)


        def expression_int(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_intContext,0)


        def expression_float(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_floatContext,0)


        def expression_string(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_stringContext,0)


        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def value_assign(self):
            return self.getTypedRuleContext(MiniGoParser.Value_assignContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_value_assign




    def value_assign(self):

        localctx = MiniGoParser.Value_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_value_assign)
        try:
            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 690
                self.struct_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.match(MiniGoParser.NIL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 692
                self.expression_boolean(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 693
                self.expression_array()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 694
                self.expression_int(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 695
                self.expression_float(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 696
                self.expression_string(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 697
                self.match(MiniGoParser.LEFT_PARENTHESES)
                self.state = 698
                self.value_assign()
                self.state = 699
                self.match(MiniGoParser.RIGHT_PARENTHESES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakdeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MiniGoParser.BREAK, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_breakdecl




    def breakdecl(self):

        localctx = MiniGoParser.BreakdeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_breakdecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(MiniGoParser.BREAK)
            self.state = 704
            _la = self._input.LA(1)
            if not(_la==18 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinuedeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MiniGoParser.CONTINUE, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_continuedecl




    def continuedecl(self):

        localctx = MiniGoParser.ContinuedeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_continuedecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(MiniGoParser.CONTINUE)
            self.state = 707
            _la = self._input.LA(1)
            if not(_la==18 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfelsedeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.BlockContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.BlockContext,i)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def elifdecls(self):
            return self.getTypedRuleContext(MiniGoParser.ElifdeclsContext,0)


        def elsedecl(self):
            return self.getTypedRuleContext(MiniGoParser.ElsedeclContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_ifelsedecl




    def ifelsedecl(self):

        localctx = MiniGoParser.IfelsedeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ifelsedecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(MiniGoParser.IF)
            self.state = 710
            self.match(MiniGoParser.LEFT_PARENTHESES)
            self.state = 711
            self.expression_boolean(0)
            self.state = 712
            self.match(MiniGoParser.RIGHT_PARENTHESES)
            self.state = 713
            self.match(MiniGoParser.LEFT_BRACE)
            self.state = 715 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 714
                self.block()
                self.state = 717 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591251601640) != 0)):
                    break

            self.state = 719
            self.match(MiniGoParser.RIGHT_BRACE)
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 720
                self.match(MiniGoParser.SEMICOLON)


            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 723
                self.elifdecls()


            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 726
                self.elsedecl()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifdeclsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elifdecl(self):
            return self.getTypedRuleContext(MiniGoParser.ElifdeclContext,0)


        def elifdecls(self):
            return self.getTypedRuleContext(MiniGoParser.ElifdeclsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_elifdecls




    def elifdecls(self):

        localctx = MiniGoParser.ElifdeclsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_elifdecls)
        try:
            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.elifdecl()
                self.state = 730
                self.elifdecls()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.elifdecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifdeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.BlockContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.BlockContext,i)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_elifdecl




    def elifdecl(self):

        localctx = MiniGoParser.ElifdeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_elifdecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(MiniGoParser.ELSE)
            self.state = 736
            self.match(MiniGoParser.IF)
            self.state = 737
            self.match(MiniGoParser.LEFT_PARENTHESES)
            self.state = 738
            self.expression_boolean(0)
            self.state = 739
            self.match(MiniGoParser.RIGHT_PARENTHESES)
            self.state = 740
            self.match(MiniGoParser.LEFT_BRACE)
            self.state = 742 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 741
                self.block()
                self.state = 744 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591251601640) != 0)):
                    break

            self.state = 746
            self.match(MiniGoParser.RIGHT_BRACE)
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 747
                self.match(MiniGoParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElsedeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.BlockContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.BlockContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_elsedecl




    def elsedecl(self):

        localctx = MiniGoParser.ElsedeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_elsedecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(MiniGoParser.ELSE)
            self.state = 751
            self.match(MiniGoParser.LEFT_BRACE)
            self.state = 753 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 752
                self.block()
                self.state = 755 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591251601640) != 0)):
                    break

            self.state = 757
            self.match(MiniGoParser.RIGHT_BRACE)
            self.state = 758
            _la = self._input.LA(1)
            if not(_la==18 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ifelsedecl_inside_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def block_inside_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Block_inside_loopContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Block_inside_loopContext,i)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def elifdecls_inside_loop(self):
            return self.getTypedRuleContext(MiniGoParser.Elifdecls_inside_loopContext,0)


        def elsedecl_inside_loop(self):
            return self.getTypedRuleContext(MiniGoParser.Elsedecl_inside_loopContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_ifelsedecl_inside_loop




    def ifelsedecl_inside_loop(self):

        localctx = MiniGoParser.Ifelsedecl_inside_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_ifelsedecl_inside_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(MiniGoParser.IF)
            self.state = 761
            self.match(MiniGoParser.LEFT_PARENTHESES)
            self.state = 762
            self.expression_boolean(0)
            self.state = 763
            self.match(MiniGoParser.RIGHT_PARENTHESES)
            self.state = 764
            self.match(MiniGoParser.LEFT_BRACE)
            self.state = 766 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 765
                self.block_inside_loop()
                self.state = 768 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591251626088) != 0)):
                    break

            self.state = 770
            self.match(MiniGoParser.RIGHT_BRACE)
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 771
                self.match(MiniGoParser.SEMICOLON)


            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 774
                self.elifdecls_inside_loop()


            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 777
                self.elsedecl_inside_loop()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elifdecls_inside_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elifdecl_inside_loop(self):
            return self.getTypedRuleContext(MiniGoParser.Elifdecl_inside_loopContext,0)


        def elifdecls_inside_loop(self):
            return self.getTypedRuleContext(MiniGoParser.Elifdecls_inside_loopContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_elifdecls_inside_loop




    def elifdecls_inside_loop(self):

        localctx = MiniGoParser.Elifdecls_inside_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_elifdecls_inside_loop)
        try:
            self.state = 784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 780
                self.elifdecl_inside_loop()
                self.state = 781
                self.elifdecls_inside_loop()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 783
                self.elifdecl_inside_loop()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elifdecl_inside_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LEFT_PARENTHESES(self):
            return self.getToken(MiniGoParser.LEFT_PARENTHESES, 0)

        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def RIGHT_PARENTHESES(self):
            return self.getToken(MiniGoParser.RIGHT_PARENTHESES, 0)

        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def block_inside_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Block_inside_loopContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Block_inside_loopContext,i)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_elifdecl_inside_loop




    def elifdecl_inside_loop(self):

        localctx = MiniGoParser.Elifdecl_inside_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_elifdecl_inside_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(MiniGoParser.ELSE)
            self.state = 787
            self.match(MiniGoParser.IF)
            self.state = 788
            self.match(MiniGoParser.LEFT_PARENTHESES)
            self.state = 789
            self.expression_boolean(0)
            self.state = 790
            self.match(MiniGoParser.RIGHT_PARENTHESES)
            self.state = 791
            self.match(MiniGoParser.LEFT_BRACE)
            self.state = 793 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 792
                self.block_inside_loop()
                self.state = 795 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591251626088) != 0)):
                    break

            self.state = 797
            self.match(MiniGoParser.RIGHT_BRACE)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 798
                self.match(MiniGoParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elsedecl_inside_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def block_inside_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Block_inside_loopContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Block_inside_loopContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_elsedecl_inside_loop




    def elsedecl_inside_loop(self):

        localctx = MiniGoParser.Elsedecl_inside_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_elsedecl_inside_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.match(MiniGoParser.ELSE)
            self.state = 802
            self.match(MiniGoParser.LEFT_BRACE)
            self.state = 804 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 803
                self.block_inside_loop()
                self.state = 806 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591251626088) != 0)):
                    break

            self.state = 808
            self.match(MiniGoParser.RIGHT_BRACE)
            self.state = 809
            _la = self._input.LA(1)
            if not(_la==18 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForloopdeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def condition(self):
            return self.getTypedRuleContext(MiniGoParser.ConditionContext,0)


        def LEFT_BRACE(self):
            return self.getToken(MiniGoParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(MiniGoParser.RIGHT_BRACE, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMICOLON)
            else:
                return self.getToken(MiniGoParser.SEMICOLON, i)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def block_inside_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Block_inside_loopContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Block_inside_loopContext,i)


        def initialization(self):
            return self.getTypedRuleContext(MiniGoParser.InitializationContext,0)


        def update(self):
            return self.getTypedRuleContext(MiniGoParser.UpdateContext,0)


        def for_access_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.For_access_valueContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.For_access_valueContext,i)


        def COLONS_EQUAL(self):
            return self.getToken(MiniGoParser.COLONS_EQUAL, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def for_arr(self):
            return self.getTypedRuleContext(MiniGoParser.For_arrContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_forloopdecl




    def forloopdecl(self):

        localctx = MiniGoParser.ForloopdeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_forloopdecl)
        self._la = 0 # Token type
        try:
            self.state = 853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 811
                self.match(MiniGoParser.FOR)
                self.state = 812
                self.condition()
                self.state = 813
                self.match(MiniGoParser.LEFT_BRACE)
                self.state = 815 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 814
                    self.block_inside_loop()
                    self.state = 817 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591251626088) != 0)):
                        break

                self.state = 819
                self.match(MiniGoParser.RIGHT_BRACE)
                self.state = 820
                _la = self._input.LA(1)
                if not(_la==18 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.match(MiniGoParser.FOR)
                self.state = 823
                self.initialization()
                self.state = 824
                self.match(MiniGoParser.SEMICOLON)
                self.state = 825
                self.condition()
                self.state = 826
                self.match(MiniGoParser.SEMICOLON)
                self.state = 827
                self.update()
                self.state = 828
                self.match(MiniGoParser.LEFT_BRACE)
                self.state = 830 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 829
                    self.block_inside_loop()
                    self.state = 832 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591251626088) != 0)):
                        break

                self.state = 834
                self.match(MiniGoParser.RIGHT_BRACE)
                self.state = 835
                _la = self._input.LA(1)
                if not(_la==18 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 837
                self.match(MiniGoParser.FOR)
                self.state = 838
                self.for_access_value()
                self.state = 839
                self.match(MiniGoParser.T__0)
                self.state = 840
                self.for_access_value()
                self.state = 841
                self.match(MiniGoParser.COLONS_EQUAL)
                self.state = 842
                self.match(MiniGoParser.RANGE)
                self.state = 843
                self.for_arr()
                self.state = 844
                self.match(MiniGoParser.LEFT_BRACE)
                self.state = 846 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 845
                    self.block_inside_loop()
                    self.state = 848 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 105834591251626088) != 0)):
                        break

                self.state = 850
                self.match(MiniGoParser.RIGHT_BRACE)
                self.state = 851
                _la = self._input.LA(1)
                if not(_la==18 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_access_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def UNDERSCORE(self):
            return self.getToken(MiniGoParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_for_access_value




    def for_access_value(self):

        localctx = MiniGoParser.For_access_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_for_access_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            _la = self._input.LA(1)
            if not(_la==50 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_arrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def expression_array(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_arrayContext,0)


        def access_field(self):
            return self.getTypedRuleContext(MiniGoParser.Access_fieldContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_arr




    def for_arr(self):

        localctx = MiniGoParser.For_arrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_for_arr)
        try:
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 857
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 858
                self.expression_array()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 859
                self.access_field(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_inside_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardecl(self):
            return self.getTypedRuleContext(MiniGoParser.VardeclContext,0)


        def constdecl(self):
            return self.getTypedRuleContext(MiniGoParser.ConstdeclContext,0)


        def shortvardecl(self):
            return self.getTypedRuleContext(MiniGoParser.ShortvardeclContext,0)


        def returndecl(self):
            return self.getTypedRuleContext(MiniGoParser.ReturndeclContext,0)


        def ifelsedecl_inside_loop(self):
            return self.getTypedRuleContext(MiniGoParser.Ifelsedecl_inside_loopContext,0)


        def breakdecl(self):
            return self.getTypedRuleContext(MiniGoParser.BreakdeclContext,0)


        def continuedecl(self):
            return self.getTypedRuleContext(MiniGoParser.ContinuedeclContext,0)


        def forloopdecl(self):
            return self.getTypedRuleContext(MiniGoParser.ForloopdeclContext,0)


        def access_field(self):
            return self.getTypedRuleContext(MiniGoParser.Access_fieldContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_block_inside_loop




    def block_inside_loop(self):

        localctx = MiniGoParser.Block_inside_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_block_inside_loop)
        try:
            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 862
                self.vardecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 863
                self.constdecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 864
                self.shortvardecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 865
                self.returndecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 866
                self.ifelsedecl_inside_loop()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 867
                self.breakdecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 868
                self.continuedecl()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 869
                self.forloopdecl()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 870
                self.access_field(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COLONS_EQUAL(self):
            return self.getToken(MiniGoParser.COLONS_EQUAL, 0)

        def value_assign(self):
            return self.getTypedRuleContext(MiniGoParser.Value_assignContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_initialization




    def initialization(self):

        localctx = MiniGoParser.InitializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_initialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(MiniGoParser.ID)
            self.state = 874
            self.match(MiniGoParser.COLONS_EQUAL)
            self.state = 875
            self.value_assign()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_boolean(self):
            return self.getTypedRuleContext(MiniGoParser.Expression_booleanContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_condition




    def condition(self):

        localctx = MiniGoParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.expression_boolean(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def other_operations(self):
            return self.getTypedRuleContext(MiniGoParser.Other_operationsContext,0)


        def value_assign(self):
            return self.getTypedRuleContext(MiniGoParser.Value_assignContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_update




    def update(self):

        localctx = MiniGoParser.UpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(MiniGoParser.ID)
            self.state = 880
            self.other_operations()
            self.state = 881
            self.value_assign()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[0] = self.expression_string_sempred
        self._predicates[1] = self.plus_string_sempred
        self._predicates[3] = self.expression_float_sempred
        self._predicates[4] = self.add_float_sempred
        self._predicates[5] = self.mul_float_sempred
        self._predicates[8] = self.expression_int_sempred
        self._predicates[9] = self.add_int_sempred
        self._predicates[10] = self.mul_int_sempred
        self._predicates[13] = self.expression_boolean_sempred
        self._predicates[14] = self.and_boolean_sempred
        self._predicates[15] = self.compare_boolean_sempred
        self._predicates[26] = self.access_field_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_string_sempred(self, localctx:Expression_stringContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def plus_string_sempred(self, localctx:Plus_stringContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def expression_float_sempred(self, localctx:Expression_floatContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def add_float_sempred(self, localctx:Add_floatContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def mul_float_sempred(self, localctx:Mul_floatContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def expression_int_sempred(self, localctx:Expression_intContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def add_int_sempred(self, localctx:Add_intContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def mul_int_sempred(self, localctx:Mul_intContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def expression_boolean_sempred(self, localctx:Expression_booleanContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def and_boolean_sempred(self, localctx:And_booleanContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

    def compare_boolean_sempred(self, localctx:Compare_booleanContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

    def access_field_sempred(self, localctx:Access_fieldContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         




