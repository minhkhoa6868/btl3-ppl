# Generated from /Users/peace/btl3-ppl/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,66,544,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,3,1,163,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
        1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,
        1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,
        1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,
        1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,
        1,51,3,51,328,8,51,1,51,1,51,1,51,5,51,333,8,51,10,51,12,51,336,
        9,51,1,51,1,51,1,51,1,51,4,51,342,8,51,11,51,12,51,343,1,51,1,51,
        1,51,1,51,4,51,350,8,51,11,51,12,51,351,1,51,1,51,1,51,1,51,4,51,
        358,8,51,11,51,12,51,359,1,51,1,51,1,51,1,51,4,51,366,8,51,11,51,
        12,51,367,1,51,1,51,1,51,1,51,4,51,374,8,51,11,51,12,51,375,1,51,
        1,51,1,51,1,51,4,51,382,8,51,11,51,12,51,383,3,51,386,8,51,1,52,
        1,52,3,52,390,8,52,1,52,4,52,393,8,52,11,52,12,52,394,1,53,3,53,
        398,8,53,1,53,4,53,401,8,53,11,53,12,53,402,1,53,1,53,4,53,407,8,
        53,11,53,12,53,408,3,53,411,8,53,1,53,3,53,414,8,53,1,54,1,54,1,
        54,1,55,1,55,1,55,5,55,422,8,55,10,55,12,55,425,9,55,1,55,1,55,1,
        56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,438,8,56,1,57,1,
        57,1,57,1,57,1,58,1,58,5,58,446,8,58,10,58,12,58,449,9,58,1,59,1,
        59,5,59,453,8,59,10,59,12,59,456,9,59,1,59,1,59,1,60,1,60,1,60,1,
        60,1,60,4,60,465,8,60,11,60,12,60,466,5,60,469,8,60,10,60,12,60,
        472,9,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,62,4,62,483,8,
        62,11,62,12,62,484,1,62,1,62,1,63,1,63,1,63,5,63,492,8,63,10,63,
        12,63,495,9,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,5,64,504,8,64,
        10,64,12,64,507,9,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,5,65,516,
        8,65,10,65,12,65,519,9,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,
        1,66,5,66,530,8,66,10,66,12,66,533,9,66,1,66,1,66,1,66,1,67,1,67,
        1,67,3,67,541,8,67,1,68,1,68,0,0,69,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        0,103,51,105,0,107,52,109,0,111,53,113,54,115,55,117,56,119,57,121,
        58,123,59,125,60,127,61,129,62,131,63,133,64,135,65,137,66,1,0,17,
        1,0,48,57,1,0,49,57,1,0,48,49,1,0,48,55,3,0,48,57,65,70,97,102,2,
        0,69,69,101,101,2,0,43,43,45,45,8,0,34,34,39,39,92,92,98,98,102,
        102,110,110,114,114,116,116,5,0,8,8,10,10,12,13,34,34,92,92,3,0,
        65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,
        2,0,42,42,47,47,3,0,9,9,13,13,32,32,4,0,9,10,13,13,34,34,92,92,4,
        0,10,10,13,13,34,34,92,92,6,0,39,39,92,92,102,102,110,110,114,114,
        116,116,584,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
        1,0,0,0,0,103,1,0,0,0,0,107,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,
        0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,
        0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,
        133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,1,139,1,0,0,0,3,162,1,0,
        0,0,5,164,1,0,0,0,7,167,1,0,0,0,9,172,1,0,0,0,11,176,1,0,0,0,13,
        183,1,0,0,0,15,188,1,0,0,0,17,193,1,0,0,0,19,200,1,0,0,0,21,210,
        1,0,0,0,23,216,1,0,0,0,25,220,1,0,0,0,27,229,1,0,0,0,29,235,1,0,
        0,0,31,241,1,0,0,0,33,243,1,0,0,0,35,245,1,0,0,0,37,247,1,0,0,0,
        39,249,1,0,0,0,41,251,1,0,0,0,43,253,1,0,0,0,45,255,1,0,0,0,47,257,
        1,0,0,0,49,259,1,0,0,0,51,261,1,0,0,0,53,263,1,0,0,0,55,265,1,0,
        0,0,57,267,1,0,0,0,59,269,1,0,0,0,61,271,1,0,0,0,63,273,1,0,0,0,
        65,276,1,0,0,0,67,279,1,0,0,0,69,282,1,0,0,0,71,285,1,0,0,0,73,288,
        1,0,0,0,75,291,1,0,0,0,77,294,1,0,0,0,79,297,1,0,0,0,81,299,1,0,
        0,0,83,302,1,0,0,0,85,304,1,0,0,0,87,307,1,0,0,0,89,310,1,0,0,0,
        91,313,1,0,0,0,93,316,1,0,0,0,95,318,1,0,0,0,97,320,1,0,0,0,99,322,
        1,0,0,0,101,324,1,0,0,0,103,327,1,0,0,0,105,387,1,0,0,0,107,397,
        1,0,0,0,109,415,1,0,0,0,111,418,1,0,0,0,113,437,1,0,0,0,115,439,
        1,0,0,0,117,443,1,0,0,0,119,450,1,0,0,0,121,459,1,0,0,0,123,478,
        1,0,0,0,125,482,1,0,0,0,127,488,1,0,0,0,129,499,1,0,0,0,131,511,
        1,0,0,0,133,525,1,0,0,0,135,540,1,0,0,0,137,542,1,0,0,0,139,140,
        5,44,0,0,140,2,1,0,0,0,141,142,5,105,0,0,142,143,5,110,0,0,143,163,
        5,116,0,0,144,145,5,102,0,0,145,146,5,108,0,0,146,147,5,111,0,0,
        147,148,5,97,0,0,148,163,5,116,0,0,149,150,5,115,0,0,150,151,5,116,
        0,0,151,152,5,114,0,0,152,153,5,105,0,0,153,154,5,110,0,0,154,163,
        5,103,0,0,155,156,5,98,0,0,156,157,5,111,0,0,157,158,5,111,0,0,158,
        159,5,108,0,0,159,160,5,101,0,0,160,161,5,97,0,0,161,163,5,110,0,
        0,162,141,1,0,0,0,162,144,1,0,0,0,162,149,1,0,0,0,162,155,1,0,0,
        0,163,4,1,0,0,0,164,165,5,105,0,0,165,166,5,102,0,0,166,6,1,0,0,
        0,167,168,5,101,0,0,168,169,5,108,0,0,169,170,5,115,0,0,170,171,
        5,101,0,0,171,8,1,0,0,0,172,173,5,102,0,0,173,174,5,111,0,0,174,
        175,5,114,0,0,175,10,1,0,0,0,176,177,5,114,0,0,177,178,5,101,0,0,
        178,179,5,116,0,0,179,180,5,117,0,0,180,181,5,114,0,0,181,182,5,
        110,0,0,182,12,1,0,0,0,183,184,5,102,0,0,184,185,5,117,0,0,185,186,
        5,110,0,0,186,187,5,99,0,0,187,14,1,0,0,0,188,189,5,116,0,0,189,
        190,5,121,0,0,190,191,5,112,0,0,191,192,5,101,0,0,192,16,1,0,0,0,
        193,194,5,115,0,0,194,195,5,116,0,0,195,196,5,114,0,0,196,197,5,
        117,0,0,197,198,5,99,0,0,198,199,5,116,0,0,199,18,1,0,0,0,200,201,
        5,105,0,0,201,202,5,110,0,0,202,203,5,116,0,0,203,204,5,101,0,0,
        204,205,5,114,0,0,205,206,5,102,0,0,206,207,5,97,0,0,207,208,5,99,
        0,0,208,209,5,101,0,0,209,20,1,0,0,0,210,211,5,99,0,0,211,212,5,
        111,0,0,212,213,5,110,0,0,213,214,5,115,0,0,214,215,5,116,0,0,215,
        22,1,0,0,0,216,217,5,118,0,0,217,218,5,97,0,0,218,219,5,114,0,0,
        219,24,1,0,0,0,220,221,5,99,0,0,221,222,5,111,0,0,222,223,5,110,
        0,0,223,224,5,116,0,0,224,225,5,105,0,0,225,226,5,110,0,0,226,227,
        5,117,0,0,227,228,5,101,0,0,228,26,1,0,0,0,229,230,5,98,0,0,230,
        231,5,114,0,0,231,232,5,101,0,0,232,233,5,97,0,0,233,234,5,107,0,
        0,234,28,1,0,0,0,235,236,5,114,0,0,236,237,5,97,0,0,237,238,5,110,
        0,0,238,239,5,103,0,0,239,240,5,101,0,0,240,30,1,0,0,0,241,242,5,
        46,0,0,242,32,1,0,0,0,243,244,5,33,0,0,244,34,1,0,0,0,245,246,5,
        59,0,0,246,36,1,0,0,0,247,248,5,91,0,0,248,38,1,0,0,0,249,250,5,
        93,0,0,250,40,1,0,0,0,251,252,5,123,0,0,252,42,1,0,0,0,253,254,5,
        125,0,0,254,44,1,0,0,0,255,256,5,40,0,0,256,46,1,0,0,0,257,258,5,
        41,0,0,258,48,1,0,0,0,259,260,5,58,0,0,260,50,1,0,0,0,261,262,5,
        61,0,0,262,52,1,0,0,0,263,264,5,43,0,0,264,54,1,0,0,0,265,266,5,
        45,0,0,266,56,1,0,0,0,267,268,5,42,0,0,268,58,1,0,0,0,269,270,5,
        47,0,0,270,60,1,0,0,0,271,272,5,37,0,0,272,62,1,0,0,0,273,274,5,
        38,0,0,274,275,5,38,0,0,275,64,1,0,0,0,276,277,5,124,0,0,277,278,
        5,124,0,0,278,66,1,0,0,0,279,280,5,43,0,0,280,281,5,61,0,0,281,68,
        1,0,0,0,282,283,5,45,0,0,283,284,5,61,0,0,284,70,1,0,0,0,285,286,
        5,42,0,0,286,287,5,61,0,0,287,72,1,0,0,0,288,289,5,47,0,0,289,290,
        5,61,0,0,290,74,1,0,0,0,291,292,5,37,0,0,292,293,5,61,0,0,293,76,
        1,0,0,0,294,295,5,58,0,0,295,296,5,61,0,0,296,78,1,0,0,0,297,298,
        5,60,0,0,298,80,1,0,0,0,299,300,5,60,0,0,300,301,5,61,0,0,301,82,
        1,0,0,0,302,303,5,62,0,0,303,84,1,0,0,0,304,305,5,62,0,0,305,306,
        5,61,0,0,306,86,1,0,0,0,307,308,5,61,0,0,308,309,5,61,0,0,309,88,
        1,0,0,0,310,311,5,33,0,0,311,312,5,61,0,0,312,90,1,0,0,0,313,314,
        5,47,0,0,314,315,5,47,0,0,315,92,1,0,0,0,316,317,5,9,0,0,317,94,
        1,0,0,0,318,319,5,13,0,0,319,96,1,0,0,0,320,321,5,92,0,0,321,98,
        1,0,0,0,322,323,5,95,0,0,323,100,1,0,0,0,324,325,7,0,0,0,325,102,
        1,0,0,0,326,328,5,45,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,385,
        1,0,0,0,329,386,5,48,0,0,330,334,7,1,0,0,331,333,3,101,50,0,332,
        331,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,
        386,1,0,0,0,336,334,1,0,0,0,337,338,5,48,0,0,338,339,5,98,0,0,339,
        341,1,0,0,0,340,342,7,2,0,0,341,340,1,0,0,0,342,343,1,0,0,0,343,
        341,1,0,0,0,343,344,1,0,0,0,344,386,1,0,0,0,345,346,5,48,0,0,346,
        347,5,66,0,0,347,349,1,0,0,0,348,350,7,2,0,0,349,348,1,0,0,0,350,
        351,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,386,1,0,0,0,353,
        354,5,48,0,0,354,355,5,111,0,0,355,357,1,0,0,0,356,358,7,3,0,0,357,
        356,1,0,0,0,358,359,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,
        386,1,0,0,0,361,362,5,48,0,0,362,363,5,79,0,0,363,365,1,0,0,0,364,
        366,7,3,0,0,365,364,1,0,0,0,366,367,1,0,0,0,367,365,1,0,0,0,367,
        368,1,0,0,0,368,386,1,0,0,0,369,370,5,48,0,0,370,371,5,120,0,0,371,
        373,1,0,0,0,372,374,7,4,0,0,373,372,1,0,0,0,374,375,1,0,0,0,375,
        373,1,0,0,0,375,376,1,0,0,0,376,386,1,0,0,0,377,378,5,48,0,0,378,
        379,5,88,0,0,379,381,1,0,0,0,380,382,7,4,0,0,381,380,1,0,0,0,382,
        383,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,0,385,
        329,1,0,0,0,385,330,1,0,0,0,385,337,1,0,0,0,385,345,1,0,0,0,385,
        353,1,0,0,0,385,361,1,0,0,0,385,369,1,0,0,0,385,377,1,0,0,0,386,
        104,1,0,0,0,387,389,7,5,0,0,388,390,7,6,0,0,389,388,1,0,0,0,389,
        390,1,0,0,0,390,392,1,0,0,0,391,393,3,101,50,0,392,391,1,0,0,0,393,
        394,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,106,1,0,0,0,396,
        398,5,45,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,
        401,3,101,50,0,400,399,1,0,0,0,401,402,1,0,0,0,402,400,1,0,0,0,402,
        403,1,0,0,0,403,404,1,0,0,0,404,410,5,46,0,0,405,407,3,101,50,0,
        406,405,1,0,0,0,407,408,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,
        409,411,1,0,0,0,410,406,1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,
        412,414,3,105,52,0,413,412,1,0,0,0,413,414,1,0,0,0,414,108,1,0,0,
        0,415,416,5,92,0,0,416,417,7,7,0,0,417,110,1,0,0,0,418,423,5,34,
        0,0,419,422,3,109,54,0,420,422,8,8,0,0,421,419,1,0,0,0,421,420,1,
        0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,426,1,
        0,0,0,425,423,1,0,0,0,426,427,5,34,0,0,427,112,1,0,0,0,428,429,5,
        116,0,0,429,430,5,114,0,0,430,431,5,117,0,0,431,438,5,101,0,0,432,
        433,5,102,0,0,433,434,5,97,0,0,434,435,5,108,0,0,435,436,5,115,0,
        0,436,438,5,101,0,0,437,428,1,0,0,0,437,432,1,0,0,0,438,114,1,0,
        0,0,439,440,5,110,0,0,440,441,5,105,0,0,441,442,5,108,0,0,442,116,
        1,0,0,0,443,447,7,9,0,0,444,446,7,10,0,0,445,444,1,0,0,0,446,449,
        1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,118,1,0,0,0,449,447,
        1,0,0,0,450,454,3,91,45,0,451,453,8,11,0,0,452,451,1,0,0,0,453,456,
        1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,454,
        1,0,0,0,457,458,6,59,0,0,458,120,1,0,0,0,459,460,5,47,0,0,460,461,
        5,42,0,0,461,470,1,0,0,0,462,469,3,121,60,0,463,465,8,12,0,0,464,
        463,1,0,0,0,465,466,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,
        469,1,0,0,0,468,462,1,0,0,0,468,464,1,0,0,0,469,472,1,0,0,0,470,
        468,1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,470,1,0,0,0,473,
        474,5,42,0,0,474,475,5,47,0,0,475,476,1,0,0,0,476,477,6,60,0,0,477,
        122,1,0,0,0,478,479,5,10,0,0,479,480,6,61,1,0,480,124,1,0,0,0,481,
        483,7,13,0,0,482,481,1,0,0,0,483,484,1,0,0,0,484,482,1,0,0,0,484,
        485,1,0,0,0,485,486,1,0,0,0,486,487,6,62,0,0,487,126,1,0,0,0,488,
        493,5,34,0,0,489,492,8,14,0,0,490,492,3,109,54,0,491,489,1,0,0,0,
        491,490,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,
        494,496,1,0,0,0,495,493,1,0,0,0,496,497,5,92,0,0,497,498,8,7,0,0,
        498,128,1,0,0,0,499,505,5,34,0,0,500,504,8,15,0,0,501,502,5,92,0,
        0,502,504,7,16,0,0,503,500,1,0,0,0,503,501,1,0,0,0,504,507,1,0,0,
        0,505,503,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,
        0,508,509,5,10,0,0,509,510,6,64,2,0,510,130,1,0,0,0,511,517,5,34,
        0,0,512,516,8,15,0,0,513,514,5,92,0,0,514,516,7,16,0,0,515,512,1,
        0,0,0,515,513,1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,518,1,
        0,0,0,518,520,1,0,0,0,519,517,1,0,0,0,520,521,5,13,0,0,521,522,5,
        10,0,0,522,523,1,0,0,0,523,524,6,65,3,0,524,132,1,0,0,0,525,531,
        5,34,0,0,526,530,8,15,0,0,527,528,5,92,0,0,528,530,7,16,0,0,529,
        526,1,0,0,0,529,527,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,531,
        532,1,0,0,0,532,534,1,0,0,0,533,531,1,0,0,0,534,535,5,0,0,1,535,
        536,6,66,4,0,536,134,1,0,0,0,537,541,3,129,64,0,538,541,3,131,65,
        0,539,541,3,133,66,0,540,537,1,0,0,0,540,538,1,0,0,0,540,539,1,0,
        0,0,541,136,1,0,0,0,542,543,9,0,0,0,543,138,1,0,0,0,36,0,162,327,
        334,343,351,359,367,375,383,385,389,394,397,402,408,410,413,421,
        423,437,447,454,466,468,470,484,491,493,503,505,515,517,529,531,
        540,5,6,0,0,1,61,0,1,64,1,1,65,2,1,66,3
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    PRIMITIVE_TYPE = 2
    IF = 3
    ELSE = 4
    FOR = 5
    RETURN_WORD = 6
    FUNC = 7
    TYPE = 8
    STRUCT = 9
    INTERFACE = 10
    CONST = 11
    VAR = 12
    CONTINUE = 13
    BREAK = 14
    RANGE = 15
    DOT = 16
    DIFFERENT = 17
    SEMICOLON = 18
    LEFT_SQUARE_BRACKET = 19
    RIGHT_SQUARE_BRACKET = 20
    LEFT_BRACE = 21
    RIGHT_BRACE = 22
    LEFT_PARENTHESES = 23
    RIGHT_PARENTHESES = 24
    COLONS = 25
    EQUAL = 26
    PLUS = 27
    MINUS = 28
    MULTIPLY = 29
    DIVIDE = 30
    MODULO = 31
    AND = 32
    OR = 33
    PLUS_EQUAL = 34
    MINUS_EQUAL = 35
    MULTIPLY_EQUAL = 36
    DIVIDE_EQUAL = 37
    MODULO_EQUAL = 38
    COLONS_EQUAL = 39
    SMALLER = 40
    SMALLER_EQUAL = 41
    GREATER = 42
    GREATER_EQUAL = 43
    DOUBLE_EQUAL = 44
    DIFFERENT_EQUAL = 45
    COMMENT = 46
    TAB = 47
    RETURN = 48
    BACKSLASH = 49
    UNDERSCORE = 50
    INT_LITERALS = 51
    FLOAT_LITERALS = 52
    STRING_LITERALS = 53
    BOOLEAN_LITERALS = 54
    NIL = 55
    ID = 56
    SINGLE_COMMENT = 57
    MULTI_COMMENT = 58
    NL = 59
    WS = 60
    ILLEGAL_ESCAPE = 61
    END_NEWLINE = 62
    END_RETURN_NEWLINE = 63
    END_EOF = 64
    UNCLOSE_STRING = 65
    ERROR_CHAR = 66

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", 
            "'struct'", "'interface'", "'const'", "'var'", "'continue'", 
            "'break'", "'range'", "'.'", "'!'", "';'", "'['", "']'", "'{'", 
            "'}'", "'('", "')'", "':'", "'='", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'&&'", "'||'", "'+='", "'-='", "'*='", "'/='", "'%='", 
            "':='", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'//'", 
            "'\\t'", "'\\r'", "'\\'", "'_'", "'nil'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "PRIMITIVE_TYPE", "IF", "ELSE", "FOR", "RETURN_WORD", "FUNC", 
            "TYPE", "STRUCT", "INTERFACE", "CONST", "VAR", "CONTINUE", "BREAK", 
            "RANGE", "DOT", "DIFFERENT", "SEMICOLON", "LEFT_SQUARE_BRACKET", 
            "RIGHT_SQUARE_BRACKET", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_PARENTHESES", 
            "RIGHT_PARENTHESES", "COLONS", "EQUAL", "PLUS", "MINUS", "MULTIPLY", 
            "DIVIDE", "MODULO", "AND", "OR", "PLUS_EQUAL", "MINUS_EQUAL", 
            "MULTIPLY_EQUAL", "DIVIDE_EQUAL", "MODULO_EQUAL", "COLONS_EQUAL", 
            "SMALLER", "SMALLER_EQUAL", "GREATER", "GREATER_EQUAL", "DOUBLE_EQUAL", 
            "DIFFERENT_EQUAL", "COMMENT", "TAB", "RETURN", "BACKSLASH", 
            "UNDERSCORE", "INT_LITERALS", "FLOAT_LITERALS", "STRING_LITERALS", 
            "BOOLEAN_LITERALS", "NIL", "ID", "SINGLE_COMMENT", "MULTI_COMMENT", 
            "NL", "WS", "ILLEGAL_ESCAPE", "END_NEWLINE", "END_RETURN_NEWLINE", 
            "END_EOF", "UNCLOSE_STRING", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "PRIMITIVE_TYPE", "IF", "ELSE", "FOR", "RETURN_WORD", 
                  "FUNC", "TYPE", "STRUCT", "INTERFACE", "CONST", "VAR", 
                  "CONTINUE", "BREAK", "RANGE", "DOT", "DIFFERENT", "SEMICOLON", 
                  "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "LEFT_BRACE", 
                  "RIGHT_BRACE", "LEFT_PARENTHESES", "RIGHT_PARENTHESES", 
                  "COLONS", "EQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
                  "MODULO", "AND", "OR", "PLUS_EQUAL", "MINUS_EQUAL", "MULTIPLY_EQUAL", 
                  "DIVIDE_EQUAL", "MODULO_EQUAL", "COLONS_EQUAL", "SMALLER", 
                  "SMALLER_EQUAL", "GREATER", "GREATER_EQUAL", "DOUBLE_EQUAL", 
                  "DIFFERENT_EQUAL", "COMMENT", "TAB", "RETURN", "BACKSLASH", 
                  "UNDERSCORE", "Digit", "INT_LITERALS", "Exponent", "FLOAT_LITERALS", 
                  "Accept_char", "STRING_LITERALS", "BOOLEAN_LITERALS", 
                  "NIL", "ID", "SINGLE_COMMENT", "MULTI_COMMENT", "NL", 
                  "WS", "ILLEGAL_ESCAPE", "END_NEWLINE", "END_RETURN_NEWLINE", 
                  "END_EOF", "UNCLOSE_STRING", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    last_tk = None

    def emit(self):
        tk = self.type
        if tk not in {self.WS, self.NL}:
            self.last_tk = tk

        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();

    def handle_newline(self):
        # check next token
        next_tk = self._input.LA(1)

        while next_tk in {ord(' '), ord('\t')}:
            # move to next char
            self._input.consume()
            # check again
            next_tk = self._input.LA(1)

        if self.last_tk in {self.ID, self.INT_LITERALS, self.FLOAT_LITERALS, self.STRING_LITERALS,
                            self.CONTINUE, self.BREAK, self.RIGHT_BRACE, self.RIGHT_SQUARE_BRACKET,
                            self.RETURN_WORD, self.PRIMITIVE_TYPE, self.BOOLEAN_LITERALS}:
            if next_tk in {ord('\n'), ord('\r')} or next_tk not in {ord(';'), ord('{')}:
                self.type = self.SEMICOLON
                self.text = ";"
                return self.emit()

        if self.last_tk == self.RIGHT_PARENTHESES:
            if next_tk == self.NL:
                self._input.consume()
                next_tk = self._input.LA(1)

            while next_tk == self.WS:
                self._input.consume()
                next_tk = self._input.LA(1)

            if next_tk in {ord('+'), ord('-'), ord('*'), ord('/'), ord('%'), ord('='), ord('['), ord('(')}:
                return self.skip()

            if next_tk not in {ord(';'), ord('{')}:
                self.type = self.SEMICOLON
                self.text = ";"
                return self.emit()
        
        return self.skip()


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[61] = self.NL_action 
            actions[64] = self.END_NEWLINE_action 
            actions[65] = self.END_RETURN_NEWLINE_action 
            actions[66] = self.END_EOF_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             self.handle_newline() 
     

    def END_NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise UncloseString(self.text[:-1])
     

    def END_RETURN_NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise UncloseString(self.text[:-2])
     

    def END_EOF_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise UncloseString(self.text[:])
     


